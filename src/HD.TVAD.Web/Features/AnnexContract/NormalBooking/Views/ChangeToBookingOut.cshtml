@using HD.TVAD.Web.Services
@using Microsoft.EntityFrameworkCore
@using HD.TVAD.ApplicationCore.Entities.Booking
@{
	Layout = null;
}
@model AnnexContractViewModel
@inject ICustomerViewService _customerViewService
@inject ISponsorProgramViewService _sponsorProgramViewService
@inject IAnnexContractViewService _annexContractViewService
@inject IGetTypeService _getTypeService
@{
	var customerSelectItems = await _customerViewService.GetCustomerCodeAndNameListItemAsync();
	var sponorProgramSelectItems = await _sponsorProgramViewService.GetCodeAndNameSelectListItemAsync();
	var bookingTypeSelectItems = await _annexContractViewService.GetBookingTypeSelectListItemAsync();
	var sponsorTypeSelectItems = await _annexContractViewService.GetSponsorTypeSelectListItemAsync();
	var annexContractTypes = await _getTypeService.GetAnnexContractTypes().ToListAsync();
	var annexContractTypeSelectItems = await _annexContractViewService.GetAnnexContractTypeListItemAsync();
}

<form id="ChangeToBookingOut-form" asp-area="Manager" asp-controller="AnnexContract" asp-action="ChangeToBookingOut" method="post" enctype="multipart/form-data" class="form-horizontal">
	<div class="modal-header">
		<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
		<h4 class="modal-title">@Localizer["Change to Booking Out annex contract"]</h4>
	</div>
	<div class="modal-body">

		<h3 class="text-center text-danger"> @ViewBag.Message</h3>
			<input type="hidden" asp-for="BookingTypeId" value="@((int)BookingTypeEnum.Contract_Sponsor_OutProgram)"/>
			<input type="hidden" asp-for="Id"/>
			<div class="form-group">
				<div class="col-md-4 control-label">
					<label asp-for="Code"></label>
				</div>
				<div class="col-md-8">
					<input asp-for="Code" class="form-control" type="text" readonly/>
					<span asp-validation-for="Code" class="text-danger"></span>
				</div>
			</div>
		<div class="form-group">
			<div class="col-md-4 control-label">
				<label asp-for="SponsorProgramId"></label>
			</div>
			<div class="col-md-8">
				<select asp-for="SponsorProgramId" data-bind="value: sponsorProgramId, event:{change: onSponsorProgramSelectChange}" class="form-control" asp-items="sponorProgramSelectItems">
					<option value="">@Localizer["Select sponsor program"]</option>
				</select>
				<span asp-validation-for="SponsorProgramId" class="text-danger"></span>
			</div>
		</div>
		<div class="form-group">
			<div class="col-md-4 control-label">
				<label asp-for="AnnexContractTypeId"></label>
			</div>
			<div class="col-md-8">
				<select asp-for="AnnexContractTypeId" asp-items="annexContractTypeSelectItems" class="form-control" data-bind="value: annexContractTypeId">
					<option value="">@Localizer["Choose..."]</option>
				</select>
				<span asp-validation-for="AnnexContractTypeId" class="text-danger"></span>
			</div>
		</div>
		<div class="form-group">
			<div class="col-md-4 control-label">
				<label asp-for="SponsorTypeId"></label>
			</div>
			<div class="col-md-8">
				<select asp-for="SponsorTypeId" class="form-control">
					<option value="@((int)SponsorTypeEnum.Copyright)">@Localizer[(SponsorTypeEnum.Copyright.GetDisplayName())]</option>
					<option value="@((int)SponsorTypeEnum.Production)">@Localizer[(SponsorTypeEnum.Production.GetDisplayName())]</option>
				</select>
				<span asp-validation-for="SponsorTypeId" class="text-danger"></span>
			</div>
		</div>
		<div class="modal-footer">
			<div class="text-center">
				<button id="submit" type="submit" value="" class="btn btn-primary"><span class="icon icon-trash"></span> @Localizer["Change"]  </button>
				<button type="button" class="btn btn-default" data-dismiss="modal"><span class="icon icon-back"></span> @Localizer["Back"] </button>
			</div>
		</div>

	</div>
</form>


<script>
	require(['module/manager', 'knockout'], function (manager, ko) {
		manager.common.submitForm.init({
			formId: 'ChangeToBookingOut-form',
		});

		var AnnexContractType = function (id, name) {
			this.id = id;
			this.name = name;
		};

		var viewModel = {
			sponsorProgramId: ko.observable("@Model.SponsorProgramId"),
			annexContractTypeId: ko.observable(),
			AnnexContractTypeSelects: ko.observableArray(),

			onSponsorProgramSelectChange: function (e) {
				var _this = this;
				GetDefaultAnnexContractTypeOfSponsorProgram(_this.sponsorProgramId());
			},

		}
	//	ko.cleanNode($("#ChangeToBookingOut-form")[0]);
	//	ko.applyBindings(viewModel, $("#ChangeToBookingOut-form")[0]);


		function GetRightAnnexContractTypes(bookingTypeId) {

			$.ajax({
				url: "Manager/AnnexContract/GetRightAnnexContractTypeByBookingTypeId",
				type: 'get',
				dataType: 'json',
				data: { bookingTypeId: bookingTypeId },
				success: function (response) {
					console.log(response);
					if (typeof response == 'object') {
						$.each(response.Data, function (i, v) {
							viewModel.AnnexContractTypeSelects.push(new AnnexContractType(v.Id.toUpperCase(), v.Name));
						});
					}
				}
			});
		}
		function GetDefaultAnnexContractTypeOfSponsorProgram(sponsorProgramId) {

			$.ajax({
				url: "Manager/SponsorProgram/GetDefaultAnnexContractTypeOfSponsorProgram",
				type: 'get',
				dataType: 'json',
				data: { sponsorProgramId: sponsorProgramId },
				success: function (response) {
					console.log(response);
					if (typeof response == 'string') {
						var annexContractTypeId = response.toUpperCase();
						console.log(annexContractTypeId);
						viewModel.annexContractTypeId(annexContractTypeId);
					}
				}
			});
		}
	//	// GetRightAnnexContractTypes($("#BookingTypeId").val()); // init
	});

</script>



