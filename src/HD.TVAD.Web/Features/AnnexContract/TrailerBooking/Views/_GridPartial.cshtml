@using HD.TVAD.ApplicationCore.Entities.Booking
@using HD.TVAD.ApplicationCore.Entities.ContractSchema
@{
	ViewBag.Title = Localizer["Annex contract"].Value;
//	Layout = "_AnnexContract_Layout";
}
@model AnnexContractIndexViewModel
@inject IAnnexContractViewService _annexContractViewService
@inject ICustomerViewService _customerViewService
@{
//	var customerNameList = await _customerViewService.GetNameListAsync();
	var customerNameSelectItems = await _customerViewService.GetCustomerCodeAndNameListItemAsync();
//	var annexContractCodeList = await _annexContractViewService.GetCodeListAsync(Model.BookingTypeId);
	var customerTypeSelectItems = await _customerViewService.GetCustomerTypeSelectListItemAsync();
}
@functions {

	public static string getIconBookingType(BookingTypeEnum bookingType)
	{
		var iconBookingType = "";
		switch (bookingType)
		{
			case BookingTypeEnum.Contract_Booking:
				iconBookingType = "<span class='label label-default'>Nor</span>";
				break;
			case BookingTypeEnum.Contract_Sponsor_InProgram:
				iconBookingType = "<span class='label label-info'>In&ensp;</span>";
				break;
			case BookingTypeEnum.Contract_Sponsor_OutProgram:
				iconBookingType = "<span class='label label-primary'>Out</span>";
				break;
			case BookingTypeEnum.Contract_Sponsor_Trailer:
				iconBookingType = "<span class='label label-warning'>Tr&ensp;</span>";
				break;
			case BookingTypeEnum.Contract_Sponsor_Benefit:
				iconBookingType = "<span class='label label-danger'>Be&ensp;</span>";
				break;
			case BookingTypeEnum.Retail:
				iconBookingType = "<span class='label label-success'>Re&ensp;</span>";
				break;
			default:
				break;
		}
		return iconBookingType;

	}
}
				<div class="panel panel-flex panel-default" id="grid-panel">
					<div class="panel-heading">
						<div class="dashhead">
							<div class="dashhead-titles">
								<div class="dashhead-title">
									<h2>
										@Html.Raw(getIconBookingType(Model.BookingTypeId))
									@Localizer[(Model.BookingTypeId.GetDisplayName())]
								</h2>
							</div>
						</div>
						<div class="dashhead-toolbar btn-toolbar">
							<button id="btn-create" class="btn btn-primary-outline create"> <span class="icon icon-plus"></span> @Localizer["Create"] </button>
						</div>
					</div>
					<div class="flextable table-actions">
						<div class="flextable-item flextable-primary">
							<div class="btn-toolbar-item input-with-icon" style="width: 70%; max-width: 600px;" data-bind="visible: showNormalSearch">
								<span class="icon icon-search"></span>
								<input type="search" data-bind="value: filterText, event: {keyup: onFilterTextKeyUp,blur: onFilterTextBlur}" id="filterText" list="items" class="form-control input-block " placeholder="@Localizer["Search..."]" />
								<datalist id="items">
									<select name="annexContracts"></select>
								</datalist>
							</div>
							<div class="btn-toolbar-item input-with-icon" style="display: none" data-bind="with: advanceSearch, visible: showAdvanceSearch">
								<form class="form-inline">
									<div class="form-group">
										<select class="form-control" style="width: 200px;" asp-items="customerNameSelectItems" data-bind="value: customerId">
											<option value="">@Localizer["Select customer..."]</option>
										</select>
									</div>
									<div class="form-group">
										<input data-bind="value: receiveDate" type="date" class="form-control" />
									</div>
									<div class="form-group">
										<input type="text" data-bind="value: scheduleCampaign" class="form-control" placeholder="@Localizer["Schedule Campaign"]" />
									</div>
									<div class="form-group">
										<input type="text" data-bind="value: content" class="form-control" placeholder="@Localizer["Content"]" />
									</div>
									<div class="form-group">
										<button type="button" data-bind="click: onSearchClick" class="btn btn-primary-outline" /> <span class="icon icon-search"></span> @Localizer["Search"]
									</div>
								</form>
							</div>
							<div class="btn-toolbar-item input-with-icon">
								<button id="search-btn" data-bind="click: onSearchBtnClick, visible: showSearchBtn" class="btn btn-primary-outline"><span class="icon icon-search"></span></button>
							</div>
							<div class="btn-toolbar-item input-with-icon">
								<button id="clearFilter" data-bind="click: onClearFilterClick" class="btn btn-primary-outline"><span class="icon icon-erase"></span></button>
							</div>
							<div class="btn-toolbar-item input-with-icon">
								<button data-bind="click: onAdvanceSearchClick, visible: showAdvanceSearchBtn" class="btn btn-primary-outline"><span class="icon icon-search"></span>@Localizer["Advance Search"]</button>
							</div>
						</div>
						<div class="flextable-item">
							<button class="btn btn-primary-outline" data-bind="click: onPrintBtnClick"><span class="icon icon-print"></span> @Localizer["Print"]</button>
							<button class="btn btn-primary-outline" data-bind="click: onPrintValueBtnClick"><span class="icon icon-print"></span> @Localizer["Print Value"]</button>
						</div>
					</div>
				</div>
				<div class="panel-body">
					<div id="grid"></div>
				</div>
			</div>



<div id="modal" class="modal fade" tabindex="-1" role="dialog">
	<div class="modal-dialog" role="document">
		<div class="modal-content">

		</div>
	</div>
</div>

<script id="edit-template" type="text/x-kendo-template">
	<div class="btn-group">
		<button data-id="#: id #" class="btn btn-danger-outline btn-sm delete"><span class="icon icon-action-delete"></span></button>
		<button data-id="#: id #" class="btn btn-warning-outline btn-sm edit"><span class="icon icon-action-edit"></span></button>
		@*<a href="Manager/SpotBooking/IndexContract/#=id#" target="_blank" data-id="#: id #" class="btn btn-success-outline btn-sm bookings"><span class="icon icon-book"></span> @Localizer["Bookings"]</a>*@
		<a href="Manager/Booking/TrailerBooking/#=id#" data-id="#: id #" class="btn btn-success-outline btn-sm bookings"><span class="icon icon-book"></span> @Localizer["Bookings"]</a>
		@*<a href="Report/Report/BroadcastCertificate/#=id#" target="_blank" data-id="#: id #" class="btn btn-success-outline btn-sm bookings"><span class="icon icon-print"></span> @Localizer["Print"]</a>
		<a href="Report/Report/BroadcastCertificateWithValueContract/#=id#" target="_blank" data-id="#: id #" class="btn btn-success-outline btn-sm bookings"><span class="icon icon-print"></span> @Localizer["Print Value"]</a>*@
	</div>
</script>
<script id="booking-type-template" type="text/x-kendo-template">
	#if(type == 7){#
	<div class="label label-warning">Tr&ensp;</div>
	#}else{#
	#if(type == 5){#
	<div class="label label-info">In&ensp;</div>
	#}else{#
	#if(type == 6){#
	<div class="label label-primary">Out</div>
	#}else{#
	#if(type == 3){#
	<div class="label label-default">No</div>
	#}else{#
			#if(type == 8){#
			<div class="label label-danger">Be</div>
			#}else{#

			#}#
	#}#
	#}#
	#}#
	#}#
</script>
<script id="sponsor-type-template" type="text/x-kendo-template">
	#if(type == 1){#
	<div class="label label-primary">Buy</div>
	#}else{#
	#if(type == 2){#
	<div class="label label-info">Pro</div>
	#}else{#
	<span>x</span>
	#}#
	#}#
</script>

<script id="checkbox-template" type="text/x-kendo-template">
	<div class="checkbox custom-control custom-checkbox">
		<label>
			<input type="checkbox" data-id="#=id#" class="contract">
			<span class="custom-control-indicator"></span>

		</label>
	</div>
</script>
<script id="checkbox-header-template" type="text/x-kendo-template">
	<div class="checkbox custom-control custom-checkbox">
		<label>
			<input type="checkbox" class="header">
			<span class="custom-control-indicator"></span>

		</label>
	</div>
</script>

<ul id="context-menu">
	@*<li data-action="change-to-booking-in">
		<span class="icon icon-action-edit"></span> @Localizer["Change to booking in contract"]
	</li>
	<li data-action="change-to-normal-booking">
		<span class="icon icon-action-edit"></span> @Localizer["Change to normal booking contract"]
	</li>*@
	<li data-action="manage-bookings">
		<span class="icon icon-action-edit"></span> @Localizer["Manage Bookings"]
	</li>
	<li data-action="delete">
		<span class="icon icon-action-delete"></span> @Localizer["Delete"]
	</li>
	<li data-action="edit">
		<span class="icon icon-action-edit"></span> @Localizer["Edit"]
	</li>
	<li data-action="change-customer">
		<span class="icon icon-action-edit"></span> @Localizer["Change customer"]
	</li>
	<li data-action="check-booking-count">
		<span class="icon icon-action-edit"></span> @Localizer["Check booking count"]
	</li>
</ul>

<script>
	require(['module/manager', 'knockout'], function (manager, ko) {

		var viewModel = {
			advanceSearch: {
				customerId: ko.observable(),
				receiveDate: ko.observable(""),
				scheduleCampaign: ko.observable(""),
				content: ko.observable(""),
				onSearchClick: function(){
					var _this = this;
					console.log("this:",_this);
					console.log("viewModel:",viewModel);

					viewModel.filter(_this.customerId(), _this.receiveDate(), _this.scheduleCampaign(), _this.content());
				}
			},
			filter: function(customerId, receiveDate, scheduleCampaign, content){				
				var grid = $("#grid").data("kendoGrid");
				var dataSource = grid.dataSource;
				var filter = {};
				if (customerId != '') {
					filter = {
						logic: 'and',
						filters: [
							//	{ field: "code", operator: "contains", value: filterText },
								{ field: "CustomerId", operator: "eq", value: customerId },
								{ field: "scheduleCampaign", operator: "contains", value: scheduleCampaign },
								{ field: "content", operator: "contains", value: content }
						],
					};
				}
				dataSource.filter(filter);
			},
			showAdvanceSearchBtn: ko.observable(true),
			showAdvanceSearch: ko.observable(false),
			showNormalSearch: ko.observable(true),
			showSearchBtn: ko.observable(true),
			onSearchBtnClick: function () {
				var _this = this;
				search(_this.filterText());
				return false; // ignore default event
			},

			filterText : ko.observable(""),
			onFilterTextKeyUp: function(d,e){
				var _this = this;
				if (e.keyCode == 13) {
					search(_this.filterText());
					return false; // ignore default event
				}
				return false;
			},
			onFilterTextBlur: function(d,e){
				var _this = this;
			//	search(_this.filterText(), _this.bookingTypeId());
				return false; // ignore default event
			},
			onClearFilterClick: function(d,e){
				var _this = this;
				_this.filterText("");
				search(_this.filterText());
			},
			onAdvanceSearchClick: function(d,e){
				var _this = this;
				_this.showNormalSearch(false);
				_this.showAdvanceSearchBtn(false);
				_this.showAdvanceSearch(true);
			},
			onPrintBtnClick: function(){
				var itemChecked = $('input.contract[type="checkbox"]:checked');
				var urlPath = "";
				if(itemChecked.length > 1)
				{
					var query = "?";
					itemChecked.each(function(i,v){
						query += '&ids=' + v.dataset.id;
					});
					urlPath = location.origin + '/Report/Report/BroadcastCertificateSomeContract' + query;
				}
				else
				{
					var grid = $("#grid").data("kendoGrid");
					var rowSelect = grid.select();
					var selectedItem = grid.dataItem(rowSelect);
					urlPath = location.origin + '/Report/Report/BroadcastCertificate/' + selectedItem.id;
				}
				window.open(urlPath,'_blank');
			},
			onPrintValueBtnClick: function(){
				var itemChecked = $('input.contract[type="checkbox"]:checked');
				var urlPath = "";
				if(itemChecked.length > 1)
				{
					var query = "?";
					itemChecked.each(function(i,v){
						query += '&ids=' + v.dataset.id;
					});
					urlPath = location.origin + '/Report/Report/BroadcastCertificateWithValueSomeContract' + query;
				}
				else
				{
					var grid = $("#grid").data("kendoGrid");
					var rowSelect = grid.select();
					var selectedItem = grid.dataItem(rowSelect);
					urlPath = location.origin + '/Report/Report/BroadcastCertificateWithValueContract/' + selectedItem.id;
				}
				window.open(urlPath,'_blank');
			},

		}
		ko.applyBindings(viewModel, $("#grid-panel")[0]);

		function search(filterText) {
			var grid = $("#grid").data("kendoGrid");
			var dataSource = grid.dataSource;
			var filter ={
				logic : 'or',
				filters : [
						{ field: "Code", operator: "contains", value: filterText },
						{ field: "Name", operator: "contains", value: filterText },
						{ field: "scheduleCampaign", operator: "contains", value: filterText },
						{ field: "content", operator: "contains", value: filterText }
				],
			};
			dataSource.filter(filter);
		};
	});


</script>
<script>
	require(['module/annex-contract'], function (module) {
		module.init({
			url: {
				controller: "AnnexContract",
				getAll: "GetAllAnnexContract",
				create: "CreateNormalBooking",
			},
			model: {
				id: 'Id',
				fields: {
					receiveDate: { field: 'ReceiveDate', type: "date" },
					signDate: { field: 'SignDate', type: "date" },
					code: { field: 'Code', type: "text" },
					customerId: { field: 'CustomerId', type: "text" },
					customerName: { field: 'CustomerName', type: "text" },
					bookingTypeName: { field: 'BookingTypeName', type: "text" },
					bookingTypeId: { field: 'BookingTypeId', type: "number" },
					sponsorProgramName: { field: 'SponsorProgramName', type: "text" },
					sponsorTypeName: { field: 'SponsorTypeName', type: "text" },
					sponsorTypeId: { field: 'SponsorTypeId', type: "number" },
					scheduleCampaign: { field: 'ScheduleCampaign', type: "text" },
					content: { field: 'Content', type: "text" },
				},
			},
			data: {
				customerId: "@Model.CustomerId",
				bookingTypeId: "@((int)Model.BookingTypeId)"
			},
			sort: [
				{ field: 'ReceiveDate', dir: 'desc' }
			],
			settings: {
				//	selectFirstRow: false,
				serverSorting: true,
			},
			columns: [
				{
					field: 'id',
					title: "@Localizer["Select"]",
					headerTemplate: function () {
						return kendo.template($("#checkbox-header-template").html())({});
					},
					template: function (dataItem) {
						return kendo.template($("#checkbox-template").html())({ id: dataItem.id });
					},
					width: '40px',
					sortable: false,
				},
				{
					field: 'code',
					title: "@Localizer["Code"]",
					width: '60px',
				},
				{
					field: 'customerName',
					title: "@Localizer["Customer"]",
					width: '350px',
				},
				{
					field: 'receiveDate',
					title: "@Localizer["Receive Date"]",
					template: function (dataItem) {
						return kendo.template($("#date-template").html())({ date: dataItem.receiveDate });
					},
					width: '80px',
				},
				{
					field: 'signDate', title: "@Localizer["Sign Date"]",
					template: function (dataItem) {
						return kendo.template($("#date-template").html())({ date: dataItem.signDate });
					},
					width: '80px',
				},
				{
					field: 'scheduleCampaign',
					title: "@Localizer["Schedule Campaign"]",
					width: '120px',

				},
				{
					field: 'content',
					title: "@Localizer["Content"]",
				},
				{
					field: "",
					title: "@Localizer["edit"]",
					template: kendo.template($("#edit-template").html()),
					width: "180px",
				}

			],
			function: {
				customOnBound: function(grid){

					$('input.header[type="checkbox"]').off().on('change', function(e){
						console.log(e);
						var checked = e.target.checked;
							$('input.contract[type="checkbox"]').each(function(i,v){
								v.checked = checked;
							});
					});

				},
				onChange: function () {
					var grid = this;
					var selected = grid.dataItem(grid.select());
					$("#detail-panel-body").load("AnnexContract/TrailerBooking/Detail/" + selected.id, function () {
						$("#detail-panel-body").animate({ opacity: 0.1 }, 0).animate({ opacity: 1 }, 200);
					});
				}
			}
		});
		$("#context-menu").kendoContextMenu({
			//	alignToAnchor: true
			target: "#grid",
			filter: "tr",
			open: function (e) {
				var grid = $("#grid").data("kendoGrid");
				var trUid = e.target.dataset.uid;
				var selected = grid.select();
				if (selected[0].dataset.uid != trUid)
					grid.select(e.target);
			},
			select: function (e) {
				var grid = $("#grid").data("kendoGrid")
				var trUid = e.target.dataset.uid;;
				var dataItem = grid.dataSource.getByUid(trUid);
				var action = e.item.dataset.action;
				switch (action) {
					case "edit":
						$.get(grid.options.link.edit + '/' + dataItem.id, function (response, status, xhr) {
							if (status == 'success') {
								$("#modal .modal-content").html(response);
								$("#modal").modal("show");
							}
						});
						break;
					case "delete":
						$("#modal .modal-content").load(grid.options.link.delete + '/' + dataItem.id, function (response, status, xhr) {
							if (status == 'success') {
								$("#modal .modal-content").html(response);
								$("#modal").modal("show");
							}
						});
						break;
					case "manage-bookings":
						console.log("manage-bookings");
						var urlPath = location.origin + "/Manager/Booking/TrailerBooking/" + dataItem.id;
						window.location = urlPath;
						break;
					case "change-to-booking-in":
						console.log("change-contract-type");
						$("#modal .modal-content").load("/AnnexContract/TrailerBooking/ChangeToBookingIn/" + dataItem.id, function (response, status, xhr) {
							if (status == 'success') {
								$("#modal .modal-content").html(response);
								$("#modal").modal("show");
							}
						});
						break;
					case "change-to-normal-booking":
						console.log("change-contract-type");
						$("#modal .modal-content").load("/AnnexContract/TrailerBooking/ChangeToNormalBooking/" + dataItem.id, function (response, status, xhr) {
							if (status == 'success') {
								$("#modal .modal-content").html(response);
								$("#modal").modal("show");
							}
						});
						break;
					case "change-customer":
						console.log("change-customer");
						$("#modal .modal-content").load("/AnnexContract/TrailerBooking/ChangeCustomer/" + dataItem.id, function (response, status, xhr) {
							if (status == 'success') {
								$("#modal .modal-content").html(response);
								$("#modal").modal("show");
							}
						});
						break;
					case "check-booking-count":
						if (dataItem.id != undefined) {
							$.ajax({
								url: "Manager/AnnexContract/CheckSpotBookingCount/" + dataItem.id,
								success: function (response) {
									alert(response);
								}
							});
						}
						break;

				}
				// handle event
			}
		});
	});
</script>
<script>

	require(['jquery'], function () {
		var path = location.pathname;
		var controller = path.split('/')[2];
		$("ul.nav.nav-pills.nav-stacked>li>a").each(function (i, v) {
			var href = $(v).attr("href");
			if (href.includes(controller)) {
				$(v).closest('li').addClass("active");
			}
		});

	});
</script>