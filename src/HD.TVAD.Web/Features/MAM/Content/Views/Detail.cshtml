@using HD.Station.WebComponents.Upload
@using HD.Workflow.Data
@model ContentViewModel
@inject WorkflowUploadHelper _workflowUploadHelper
@inject WorkflowDataProvider _wfDataProvider
@inject HD.Station.MediaAssets.IMediaAssetService _mamService
@{
    Layout = null;
    var mode = HD.Station.WebComponents.FormMode.Details;
    var profileId = _settings.Value.AppSettings.ProfileId;
    var sdTypeId = _settings.Value.AppSettings.AssetTypeTVCId;
    var hdTypeId = _settings.Value.AppSettings.AssetTypeTVCHDId;
    var lstUpload = await _workflowUploadHelper.GetUploadTypesAsync(Model.Id);
    var docTypeId = _settings.Value.AppSettings.AssetTypeDocsId;

    var workflow = await _wfDataProvider.GetMainWorkflowByExternalIdAsync(Model.Id);
    var lstAsset = new List<HD.Station.MediaAssets.Models.AssetVM>();
    try
    {
        lstAsset = await _mamService.LstAssetByTypeIdAsync(Model.Id, sdTypeId);
    }
    catch
    {
        lstAsset = new List<HD.Station.MediaAssets.Models.AssetVM>();
    }
    var lstAssetHD = new List<HD.Station.MediaAssets.Models.AssetVM>();
    try
    {
        lstAssetHD = await _mamService.LstAssetByTypeIdAsync(Model.Id, hdTypeId);
    }
    catch
    {
        lstAssetHD = new List<HD.Station.MediaAssets.Models.AssetVM>();
    }
    var totalAsset = lstAsset.Concat(lstAssetHD).ToList();

    var lstAssetDocs = new List<HD.Station.MediaAssets.Models.AssetVM>();
    try {
        lstAssetDocs = await _mamService.LstAssetByTypeIdAsync(Model.Id, docTypeId);
    }
    catch
    {
        lstAssetDocs = new List<HD.Station.MediaAssets.Models.AssetVM>();
    }

    var lstPreviewUrl = new List<string>();
    var lstDocsUrl = new List<string>();

    if (totalAsset.Count > 0)
    {
        foreach (var asset in totalAsset)
        {
            lstPreviewUrl.AddRange(await _mamService.LstPreviewUrlAsync(asset.Id));
        }
    }

    if (lstAssetDocs.Count > 0)
    {
        foreach (var assetDoc in lstAssetDocs)
        {
            lstDocsUrl.AddRange(await _mamService.LstDocsUrlAsync(assetDoc.Id));
        }
    }
}
<script>
    //console.log("@hdTypeId");
    if ("@sdTypeId" == null || "@sdTypeId" == "" || "@sdTypeId" == "00000000-0000-0000-0000-000000000000") {
        alert("@Localizer["Asset Type TVC SD was not configured!"]");
    }
    if ("@hdTypeId" == null || "@hdTypeId" == "" || "@hdTypeId" == "00000000-0000-0000-0000-000000000000") {
        alert("@Localizer["Asset Type TVC HD was not configured!"]");
    }
    if ("@docTypeId" == null || "@docTypeId" == "" || "@docTypeId" == "00000000-0000-0000-0000-000000000000") {
        alert("@Localizer["Asset Type Document was not configured!"]");
    }
</script>
<form id="contentDetailForm" asp-action="UpdateMetadata" class="form-horizontal">

    @await Component.InvokeAsync("HD.Station.WebComponents.Fieldset", new { id = Model.Id, profileId = Guid.Parse(profileId), mode = mode })

    <div class="row">
        <div class="text-center" style="margin-top: 10px">
            <div class="btn-group">
                <button id="create-btn" type="button" class="btn btn-primary-outline"><span class="icon icon-plus"></span> @Localizer["Create"] </button>
                <button id="edit-btn" type="button" class="btn btn-primary-outline"><span class="icon icon-action-edit"></span> @Localizer["Edit"] </button>
                <button id="delete-btn" type="button" data-id="@Model.Id" class="btn btn-primary-outline"><span class="icon icon-action-delete"></span> @Localizer["Delete"] </button>
                <button id="upload-btn" type="button" data-id="@Model.Id" class="btn btn-primary-outline"><span class="icon icon-action-upload"></span> @Localizer["Upload"]...</button>
                <button id="preview-btn" type="button" data-id="@Model.Id" class="btn btn-primary-outline"><span class="icon icon-play"></span> @Localizer["Preview and Approve"]</button>
                <button id="viewdoc-btn" type="button" data-id="@Model.Id" class="btn btn-primary-outline"><span class="icon icon-eye"></span> @Localizer["View Documents"] </button>
            </div>
        </div>
    </div>
</form>
<div id="uploadWindow" hidden></div>
<div id="previewWindow" hidden></div>
<div id="viewdocWindow" hidden></div>
<div id="viewWorkflowWindow" hidden></div>
<script>
    require(['content/detail'], function (assetDetailModule) {
    	assetDetailModule.init({
            contentId: "@Model.Id",
            previewWindowName: "@Localizer["Preview and Approve"]",
            viewDocWindowName: "@Localizer["View Documents"]",
            uploadWindowName: "@Localizer["Upload Management"]"            
        });
        $(document).ready(function () {

            var lstUpload = @Json.Serialize(lstUpload);
            if (lstUpload.length === 0) {
                $("#upload-btn").attr("disabled", true);
                $("#upload-btn").attr("title", "@Localizer["This content doesn't allow to Upload, check its workflow again!"]");
            }
            var lstUrl = @Json.Serialize(lstPreviewUrl);

            if ('@workflow' === ''|| lstUrl.length === 0) {
                $("#preview-btn").attr("disabled", true);
                $("#preview-btn").attr("title", "@Localizer["This content doesn't has any Lowres files for preview!"]");
            }
            var lstDocsUrl = @Json.Serialize(lstDocsUrl);
            if ('@workflow' === '' || lstDocsUrl.length === 0 ) {
                $("#viewdoc-btn").attr("disabled", true);
                $("#viewdoc-btn").attr("title", "@Localizer["This content doesn't has any document files for preview!"]");
            }
        });
    });
</script>
<style>
    .checkbox input[type=checkbox], .checkbox-inline input[type=checkbox]{
        position:relative;
    }
</style>

