@inject HD.Station.MediaAssets.IMediaAssetService _mamService
@model PreviewAndApproveViewModel
@{
    var lstAsset = Model.AssetVMs;
    var lowresTypeId = _settings.Value.AppSettings.AssetTypeTVCId;
    var lstPreviewUrl = await _mamService.LstPreviewUrlAsync(lstAsset[0].Id);
    var vM = await _mamService.GetMediaAssetAsync(lstAsset[0].Id);
    var previewObj = new PreviewViewModel
    {
        LstPreviewUrl = lstPreviewUrl,
        MarkIn = vM.MarkIn,
        MarkOut = vM.MarkOut
    };
}
<head>
    <script type="text/javascript" src="~/js/asset/subTitle.js"></script>
    <script type="text/javascript" src="~/js/asset/timecode.js"></script>
    <script type="text/javascript" src="~/js/asset/mediaelement.js"></script>
    <script type="text/javascript" src="~/js/asset/audioVisualizer.js"></script>
    <script type="text/javascript" src="~/js/asset/mediaelement-and-player.js"></script>

    <link rel="stylesheet" href="~/css/asset/subtitle.css">
    <link rel="stylesheet" href="/css/asset/player.css">
    <link rel="stylesheet" href="/css/asset/mediaelementplayer.css">
    <link rel="stylesheet" href="/css/asset/audioVisualizer.css">

    @{
        Layout = null;
    }

</head>

<div class="" style="height: 100%">
    <div class="container-flex">
        <div class="flex flex-2">
            <div class="panel panel-default panel-flex" style="border:none;">
                @*<div class="panel-heading">
                    @Localizer["Preview"]
                </div>*@
                <div class="panel-body" style="padding:0;border:none;">
                    <div class="container-vertical-flex">                        
                        <div class="flex flex-0" style="margin-top:0px;" id="previewPlace">
                            <div class="fields ui-corner-bottom" style="background-color:#1a1c22;">
                                <div class="media-infor-content" style="width: 100%;">

                                </div>
                                <div id="player0" class="mejs-container mejs-video" style="height:300px; margin: auto;text-align:center;">

                                </div>
                                <script>
                                    var width = window.innerWidth;
                                    var height = window.innerHeight;
                                    if (height > 900) {

                                        $("#player0").height(450);
                                    }
                                </script>
                                @*<textarea id="subtitlePreview" rows="2" cols="60" spellcheck="false" disabled="" draggable="false"></textarea>*@

                                <br />

                                <form id="subTitleFormx">
                                    <div class="row" style="width:100%; text-align:center">
                                        <div id="timeTrim" style="height:40px;">
                                            <div id="status" style="height:14px;"></div> 
                                            <div class="subTitleTime hidden">Sub in</div>
                                            <div id="startTimeSubCur" class="subTitleTime hidden" style="width: 65px; margin-left: 5px" converter="timeConverter"></div>
                                            <div class="subTitleTime  hidden">--></div>
                                            <div id="endTimeSubCur" class="subTitleTime hidden" style="width: 65px; margin-left: 5px" converter="timeConverter"></div>
                                            <div class="row">
                                                <div class="col-md-2">
                                                    <select type="text" class="navbar-form-control" id="videoSpeedSelect">
                                                        <option value="1"> X1 </option>
                                                        <option value="4">X4</option>
                                                        <option value="8"> X8 </option>
                                                        <option value="16">X16</option>
                                                    </select>
                                                </div>
                                                @*<div class="col-md-2">
                                                    <div style="float:right">
                                                        <input id="enabledVuMeter" type="checkbox" style="width: 17px">
                                                        <label onclick="changeEnabledVu()" style="font-size: 11px">VU meter</label>
                                                    </div>
                                                </div>*@
                                                <div class="col-md-5">
                                                    <div class="hidden">
                                                        <input id="enabledSpectrum" checked="checked" type="checkbox" style="width: 17px">
                                                        <label onclick="changeEnabledSpectrum()" style="font-size: 11px">Spectrum</label>
                                                    </div>
                                                    <div id="timeCodeInput">
                                                        <input id="startTimeTrim" disabled="disabled" value="00:00:00:00" converter="timeConverter" style="border-radius: 3px;  border: 1.4px solid;" size="8" />
                                                        <span> : </span>
                                                        <input id="endTimeTrim" disabled="disabled" value="00:00:00:00" converter="timeConverter" style="border-radius: 3px;  border: 1.4px solid;" size="8" />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>                                    
                                    <div class="row">
                                        <div class="controls" style="width:100%; text-align:center">
                                            <button type="button" title="@Localizer["play"]" class="btn btn-default-outline" id="ppBtn">
                                                <span class="icon">
                                                    <i class="icon icon-play "></i>
                                                </span>
                                            </button>
                                            <button type="button" class="btn btn-default-outline" title="@Localizer["play as MarkIn, MarkOut"]" id="playBackBtn" style="margin-right: 25px">
                                                <span class="icon">
                                                    <i class="icon icon-eye"></i>
                                                </span>
                                            </button>
                                            <button type="button" class="btn btn-default-outline" title="@Localizer["to start"]" id="firstBtn">
                                                <span class="icon">
                                                    <i class="icon icon-to-start "></i>
                                                </span>
                                            </button>

                                            <button type="button" class="btn btn-default-outline" title="@Localizer["fast backward"]" id="ffbwBtn">
                                                <span class="icon icon-stack">
                                                    <i class="icon-fast-backward icon-stack-1x" style="left: -0.125em"></i>
                                                    <i class="icon-fast-backward icon-stack-1x" style="left: 0.3em"></i>
                                                </span>

                                            </button>

                                            <button type="button" class="btn btn-default-outline" title="@Localizer["backward"]" id="prevBtn">
                                                <span class="icon">
                                                    <i class="icon icon-fast-backward "></i>
                                                </span>
                                            </button>
                                            <button type="button" class="btn btn-default-outline" title="@Localizer["forward"]" id="fwdBtn">
                                                <span class="icon">
                                                    <i class="icon icon-fast-forward "></i>
                                                </span>
                                            </button>

                                            <button type="button" class="btn btn-default-outline" title="@Localizer["fast forward"]" id="fffwBtn">
                                                <span class="icon icon-stack">
                                                    <i class="icon-fast-forward icon-stack-1x" style="left: -0.125em"></i>
                                                    <i class="icon-fast-forward icon-stack-1x" style="left: 0.3em"></i>
                                                </span>
                                            </button>
                                            @*<button type="button" class="btn btn-default-outline" title="to end" id="lastBtn">
                                                    <span class="icon">
                                                        <i class="icon icon-to-end "></i>
                                                    </span>
                                                </button>*@

                                            <button type="button" class="btn btn-default-outline" title="mark in" id="markInBtn">
                                                    <span class="icon">
                                                        <i class="icon icon-left-open"></i>
                                                    </span>
                                                </button>

                                            <button type="button" class="btn btn-default-outline" title="mark out" id="markOutBtn">
                                                    <span class="icon">
                                                        <i class="icon icon-right-open"></i>
                                                    </span>
                                                </button>                                            

                                            @*<button type="button" class="btn btn-default-outline" title="save cut" id="captureBtn">
                                                    <span class="icon">
                                                        <i class="icon icon-camera "></i>
                                                    </span>
                                                </button>*@
                                            <button type="button" class="btn btn-default-outline" title="@Localizer["save cut"]" id="btnSaveCut">
                                                <span class="icon">
                                                    <i class="icon icon-floppy"></i>
                                                </span>
                                            </button>
                                        </div>
                                    </div>
                                    <br />
                                </form>
                            </div>
                        </div>
                        <div class="flex flex-1" style="margin-top:10px;">
                            <div id="grid"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="flex flex-2" style="margin-left:10px;">
            <div class="container-vertical-flex">
                <div class="flex flex-0">
                    <div class="panel panel-default" style="border:none;">
                        <div class="panel-body" id="approveDiv" style="padding:0px;border:none;">
                            @await Component.InvokeAsync("HD.Workflow.WebComponents.Censorship", new { id = Model.WorkflowId, providers = Model.ProviderId, layout = "" })
                        </div>
                    </div>
                </div>
                <div class="flex flex-1" style="margin-top:0px;">
                    @{
                        var url = "/workflow/api/" + Model.WorkflowId.ToString() + "/state";
                    }
                    <iframe id="workflowIframe" src="@url" style="width:100%; height:100%"></iframe>
                    <script>console.log("@url")</script>
                </div>
            </div>

        </div>
    </div>
</div>

<div id="startTimeHidden" class="hidden">@Localizer["startTime"]</div>
<div id="endTimeHidden" class="hidden">@Localizer["endTime"]</div>
<div id="commentDisabled" class="hidden">@Localizer["approvePer"]</div>
@*@(Html.Kendo().ContextMenu()
    .Name("gridLowresContextMenu")
    .Target("#grid")
    .Orientation(ContextMenuOrientation.Vertical)
    .Items(items =>
    {
        items.Add()
        .Text(Localizer["Set Active"].Value);

    })
    .Events(e => e.Select("selectContextMenu"))
    .Deferred()
)*@
<script>
    var lstAssets = @Json.Serialize(lstAsset);
    //console.log(lstAssets);
    var previewObj = @Json.Serialize(previewObj);

    //console.log(previewObj);
    _basePath = "";
    _translator = {};
    _subItems = [];
    //_startOffset = convertTimeToStringDot(previewObj.MarkIn / 1000);
    //_endOffset = convertTimeToStringDot(previewObj.MarkOut / 1000);
    _playerOptions = {
        "safetyFrame": false, "currentTime": false, "initVisualizer": false, "hiddenVuMeter": true, "hiddenSpectrum": true,
        "originUrl": "/origin/",
        "tempUrl": "/temp/",
        "startTime": "00:00:00.00", "endTime": "00:56:37.21",
        "startTimeOffset": "00:00:00.00", "endTimeOffset": "00:56:37.21",
        "src": previewObj.LstPreviewUrl[0]
    };
    $("#startTimeTrim").val(convertTimeToStringDot(previewObj.MarkIn / 1000));
    $("#endTimeTrim").val(convertTimeToStringDot(previewObj.MarkOut / 1000));
    loadPlayer(_playerOptions);
    hdplayer.addType = 1;
    initControlButtons();
    if (previewObj.MarkOut > previewObj.MarkIn){
        $("#playBackBtn").click();
    } else {
        hdplayer.play();
    }
    $("#grid").kendoGrid({
        dataSource: {
            type: "aspnetmvc-ajax",
            transport: {
                read: {
                    type: "GET",
                    url: '/MAM/Content/GetAllAssetForContent',
                    dataType: 'json',
                    data: { contentId: "@Model.ContentId", assetTypeId: "@lowresTypeId" }
                }
            },
            schema: {
                model: {
                    id: 'Id',
                    fields: {
                        Name: { type: "string" },
                        AssetTypeName:{type: "string"},
                        UploadedDate: { type: "date" },
                        IsActivated: { type: "bool" }
                    }
                }
            },
            pageSize: 5
        },
        height: 550,
        scrollable: true,
        sortable: true,
        filterable: true,
        pageable: {
            input: true,
            numeric: false
        },
        columns: [
            { field: "Name", title: "@Localizer["Name"]" },
            { field: "AssetTypeName", title: "@Localizer["Asset Type"]"},
            { field: "UploadedDate", title: "@Localizer["Uploaded Date"]", format: "{0:yyyy-MM-dd}" },
            {
                field: "IsActivated", title: "@Localizer["Is Activated"]",
                template: '<input type="checkbox" #= IsActivated ? checked="checked" : "" # disabled="disabled" ></input>'
            }
        ]
    });

    $("#btnSaveCut").click(function () {
        var markInVal = convertStringToMs($("#startTimeTrim").val());
        var markOutVal = convertStringToMs($("#endTimeTrim").val());
        console.log(markInVal);
        console.log(markOutVal);
        if (markOutVal <= markInVal)
            alert("@Localizer["Mark out value must be greater than Mark in value!"]")
        else {
            var vM = {
                Id: _mediaAssetId,
                MarkIn: markInVal,
                MarkOut: markOutVal
            };
            $.ajax({
                type: "POST",
                url: "/MAM/Content/SaveVideoCut",
                data: { viewModel: vM },
                async: true,
                success: function (msg) {
                    //console.log(msg);  
                    alert("@Localizer["Save cut successfully!"]");
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ' ' + errorThrown + ' ' + XMLHttpRequest.responseText);
                }
            });

        }

    });
    var _assetId;
    var _assetTypeId;
    var _mediaAssetId = lstAssets[0].MediaAssetId;
    //console.log(_mediaAssetId);
    @*@Html.Kendo().DeferredScriptsFor("gridLowresContextMenu", false);

        function selectContextMenu(e) {
            switch ($(e.item).text()) {
                case "@Localizer["Set Active"]":
                    SetActive();
                    break;
            }
    }
        function SetActive() {
            var activeAsset = {
                ContentId: "@Model.ContentId",
                AssetTypeId: _assetTypeId,
                ActiveAssetId: _assetId
            };
            $.ajax({
                type: "POST",
                url: "/MAM/Content/SetAssetActive",
                data: { contentActiveAsset: activeAsset },
                async: true,
                success: function (msg) {
                    console.log(msg);
                    $('#grid').data('kendoGrid').dataSource.read();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ' ' + errorThrown + ' ' + XMLHttpRequest.responseText);
                }
            });
        }*@
    $("#grid").on("mousedown", "tr[role='row']", function (e) {
        if (e.which === 1) {
            $("#grid tbody tr").removeClass("k-state-selected");
            $(this).toggleClass("k-state-selected");
            var gridData = $("#grid").data('kendoGrid');

            var selectedRowData = gridData.dataItem($(event.target).closest("tr"));
            var id = selectedRowData.id;
            _mediaAssetId = selectedRowData.MediaAssetId;
            //console.log(selectedRowData);
            $.ajax({
                type: "POST",
                url: "/MAM/Content/GetLstPreviewObj",
                data: {assetId:id},
                async: true,
                success: function (msg) {
                    console.log(msg);                    
                    _playerOptions = {
                        "safetyFrame": false, "currentTime": false, "initVisualizer": false, "hiddenVuMeter": true, "hiddenSpectrum": true,
                        "originUrl": "/origin/",
                        "tempUrl": "/temp/",
                        "startTime": "00:00:00.00", "endTime": "00:56:37.21",
                        "startTimeOffset": "00:00:00.00", "endTimeOffset": "00:56:37.21",
                        "src": msg.LstPreviewUrl[0]
                    };
                    $("#startTimeTrim").val(convertTimeToStringDot(msg.MarkIn / 1000));
                    $("#endTimeTrim").val(convertTimeToStringDot(msg.MarkOut / 1000));
                    //_startOffset = convertTimeToStringDot(msg.MarkIn / 1000);
                    //_endOffset = convertTimeToStringDot(msg.MarkOut / 1000);
                    _subItems = [];
                    loadPlayer(_playerOptions);
                    if (msg.MarkOut > msg.MarkIn) {
                        $("#playBackBtn").click();
                    } else {
                        hdplayer.play();
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ' ' + errorThrown + ' ' + XMLHttpRequest.responseText);
                }
            });
        } else if (e.which === 3) {
            $("#grid tbody tr").removeClass("k-state-selected");
            $(this).toggleClass("k-state-selected");
            var gridData = $("#grid").data('kendoGrid');

            var selectedRowData = gridData.dataItem($(event.target).closest("tr"));
            console.log(selectedRowData);
            _assetId = selectedRowData.Id;
            _assetTypeId = selectedRowData.AssetTypeId;
        }
        });
    formSubmit();
    function formSubmit() {
        $("#approveDiv form").submit(function (event) {
            event.preventDefault();
            //console.log(this);
            var that = this;
            var dataObj = $(that).serialize();
            var val = $("button[type=submit][clicked=true]").val();
            console.log($("button[type=submit][clicked=true]"));
            console.log(val);
            dataObj += "&State=" + val;
            console.log(dataObj);
            $.ajax({
                url: '/workflow/api/state',
                type: 'post',
                dataType: 'html',   //expect return data as html from server
                data: dataObj,
                success: function (response, textStatus, jqXHR) {
                    console.log(response);
                    var newUrl = "/workflow/api/" + '@Model.ContentId' + "/Censorship?layout=&Providers=" + '@Model.ProviderId';
                    $('#approveDiv').load(newUrl, function () {
                        formSubmit();
                    });   //select the id and put the response in the html
                    document.getElementById('workflowIframe').contentWindow.location.reload();

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log('error(s):' + textStatus, errorThrown);
                }
            });

        });
    }
    function getFileNameFromPath(path) {
        path = path.replace(/\\/g, "/").replace(/\/\//g, "/");
        var arr = path.split("/");
        var fileName = path;
        if (arr.length > 0) {
            fileName = arr[arr.length - 1];
        }
        return fileName;
    }

    function mobilecheck() {
        return false;
    }

    _disConvertSubToHtml = true;
    _allSubItems = [{ "itemId": "21652", "startTime": "00:12:23.07", "endTime": "00:16:48.18", "type": 1, "text": "", "startTimeFloat": 743.28, "subIndex": 0, "fullName": "Lê Văn Thành", "subtitleId": "154", "userId": 1 }, { "itemId": "21653", "startTime": "00:20:13.13", "endTime": "00:22:37.15", "type": 1, "text": "comment", "startTimeFloat": 1213.52, "subIndex": 0, "fullName": "Lê Văn Thành", "subtitleId": "154", "userId": 1 }];
    _subItems = _allSubItems;

    _eventType = { "enabledSubtitle": false, "enabledQc": true, "enabledSecondaryEvent": false };
    function checkCookies() {
        return false;
    }

    function checkEnabledVu(that) {
        var checked = $(that).attr("checked");
        if (typeof checked != "undefined" && (checked === "checked" || checked === true)) {
            if (typeof hdplayer != "undefined" && typeof hdplayer.audioVisual != "undefined") {
                hdplayer.audioVisual.options.vuDisabled = false;
                $(".vu_meter").css("visibility", "visible");
            }
            $.cookie("vu_meter_disabled", "false", { 'expires': 14 });
        } else {
            if (typeof hdplayer != "undefined" && typeof hdplayer.audioVisual != "undefined") {
                hdplayer.audioVisual.options.vuDisabled = true;
                hdplayer.audioVisual.clearVu();
            }
            $.cookie("vu_meter_disabled", "true", { 'expires': 14 });
            $(".vu_meter").css("visibility", "hidden");
        }
    }

    function checkEnabledSpectrum(that) {
        var checked = $(that).attr("checked");
        if (typeof checked != "undefined" && (checked == "checked" || checked === true)) {
            if (typeof hdplayer != "undefined" && typeof hdplayer.audioVisual != "undefined") {
                hdplayer.audioVisual.options.drumDisabled = false;
                $("#fft").css("visibility", "visible");
            }
            $.cookie("spectrum_disabled", "false", { 'expires': 14 });
        } else {
            if (typeof hdplayer != "undefined" && typeof hdplayer.audioVisual != "undefined") {
                hdplayer.audioVisual.options.drumDisabled = true;
                hdplayer.audioVisual.clearDrum();
            }
            $.cookie("spectrum_disabled", "true", { 'expires': 14 });
            $("#fft").css("visibility", "hidden");
        }
    }
    function changeEnabledVu() {
        var that = $("#enabledVuMeter");
        var checked = that.attr("checked");
        if (typeof checked != "undefined" && (checked === "checked" || checked === true)) {
            that.attr("checked", false);
        } else {
            that.attr("checked", "checked");
        }
        checkEnabledVu(that);
    }
    function changeEnabledSpectrum() {
        var that = $("#enabledSpectrum");
        var checked = that.attr("checked");
        if (typeof checked != "undefined" && (checked === "checked" || checked === true)) {
            that.attr("checked", false);
        } else {
            that.attr("checked", "checked");
        }
        try {
            checkEnabledSpectrum(that);
        } catch (e) {
            console.log(e);
        }
    }

    function checkEnabledSubtile(that) {
        var checked = $(that).attr("checked");
        if (typeof checked != "undefined" && (checked == "checked" || checked === true)) {
            $("#subtitlePreview").removeClass("hidden");
        } else {
            $("#subtitlePreview").addClass("hidden");
        }
    }

    function initFormControl() {
        checkCookies();
        $("#enabledVuMeter").change(function () { checkEnabledVu(this) });
        $("#enabledSpectrum").change(function () {
            var that = this;
            checkEnabledSpectrum(that);
        });
        $("#videoSpeedSelect").change(function () {
            hdplayer.play();
            hdplayer.rate(parseInt($(this).val()));
            _rate = $(this).val();
        });

    }
    if (!window.mobilecheck()) {
        initFormControl();
    }

</script>
<style>    
    #subtitlePreview {
        margin-top: -115px;
    }

    #status {
        margin-top: -5px;
    }

    .vu_meter {
        height: 228px;
        width: 60px;
        position: absolute;
        top: 30px;
        left: 30px;
        opacity: .6;
    }

        .vu_meter .meter-channel {
            width: calc(50% - 2px);
            height: 100%;
            margin: 0 1px 0 1px;
        }

    .media-infor-content .media-infor {
        float: left;
        margin-left: 7px;
    }

    .mejs-container {
        position: relative;
        font-family: Helvetica, Arial;
        background: #1a1c22;
    }
</style>
