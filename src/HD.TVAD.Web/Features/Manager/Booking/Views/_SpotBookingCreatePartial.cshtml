@using HD.TVAD.ApplicationCore.Entities.Booking
@{
	Layout = null;
}
@model SpotBookingCreateIndexViewModel

@inject ITimeBandViewService _timeBandViewService
@inject ITimeBandSliceForTypeService _timeBandSliceForTypeService
@{
	var timeBandSelectItems = new List<SelectListItem>();

	switch (Model.BookingType)
	{
		case BookingTypeEnum.Retail:
			var timeBands = await _timeBandSliceForTypeService.GetTimeBandsForTypeAsync(BookingTypeEnum.Retail);
			timeBandSelectItems = timeBands.Select(t => new SelectListItem()
			{
				Value = t.Id.ToString(),
				Text = t.TimeBandBase.Name,
			})
			.OrderBy(t => t.Text)
			.ToList();
			break;
		default:
			timeBandSelectItems = (await _timeBandViewService.GetSelectListItemAsync()).ToList();
			break;
	}

}
<div class="panel panel-default">
	<div class="panel-heading">
		@Localizer["Spot booking info"]
	</div>
	<div class="panel-body">
		<form id="add-spotBooking-form" data-bind="submit: onCreateFormSubmit" asp-area="Manager" asp-controller="SpotBooking" asp-action="CreateAPI" method="post" enctype="multipart/form-data" class="form-horizontal">

			<input type="hidden" asp-for="AnnexContractAssetId" data-bind="value: annexContractAssetId"/>
			<div class="col-md-12">
				<div class="form-group">
					<div class="col-md-4 control-label">
						<label asp-for="BroadcastDate"></label>
					</div>
					<div class="col-md-6">
						<input asp-for="BroadcastDate" class="form-control" type="date" data-bind="value: broadcastDate, event: {change: onBroadcastDateChange}" />
						<span asp-validation-for="BroadcastDate" class="text-danger"></span>
					</div>
					<div class="col-md-2">
						<div class="checkbox-inline custom-checkbox custom-control">
							<label>
								<input type="checkbox" />
								<span class="custom-control-indicator"></span>
							</label>
						</div>
					</div>
				</div>
			</div>
			<div class="col-md-12">
				<div class="form-group">
					<div class="col-md-4 control-label">
						<label asp-for="TimeBandId"></label>
					</div>
					<div class="col-md-6">
						<select asp-for="TimeBandId" class="form-control" data-bind="value: timeBandId,event: {change: onTimeBandSelectChange}" asp-items="timeBandSelectItems">
							<option value="">Choose...</option>
						</select>
					</div>
					<div class="col-md-2">
						<div class="radio-inline custom-radio custom-control">
							<label>
								<input type="radio" />
								<span class="custom-control-indicator"></span>
							</label>
						</div>
					</div>
				</div>
			</div>
			<div class="col-md-12">
				<div class="form-group">
					<div class="col-md-4 control-label">
						<label asp-for="TimeBandSliceId"></label>
					</div>
					<div class="col-md-6">
						<select class="form-control" asp-for="TimeBandSliceId" data-bind="enable: enableTimeBandSliceSelect, value: timeBandSliceId,
									event: {change: onTimeBandSliceSelectChange} ,
									options: timebandSliceOptions,
								optionsText: 'name',
								optionsValue: 'id',
								optionsCaption: 'Choose...'"></select>
					</div>
					<div class="col-md-2">
					</div>
				</div>
			</div>
			<div class="col-md-12">
				<div class="form-group">
					<div class="col-md-4 control-label">
						<div class="checkbox-inline custom-checkbox custom-control">
							<label>
								<input type="checkbox" data-bind="checked: isPositionCost, event: {change: onIsPositionCostChange}" asp-for="IsPositionCost" />
								<span class="custom-control-indicator"></span>
								<span class="control-label">@Localizer["Position"]</span>
							</label>
						</div>
					</div>
					<div class="col-md-6">
						<input class="form-control" data-bind="enable: enablePositionInput, value: position" type="number" asp-for="Position" />
					</div>
					<div class="col-md-2">
						<div class="checkbox-inline custom-checkbox custom-control">
							<label>
								<input type="checkbox" />
								<span class="custom-control-indicator"></span>
							</label>
						</div>
					</div>

				</div>

			</div>
			<div class="col-md-4">

			</div>
			<div class="col-md-8">
				@*<div class="checkbox-inline custom-checkbox custom-control">
					<label>
						<input type="checkbox" />
						<span class="custom-control-indicator"></span>
						@Localizer["Position cost"]
					</label>
				</div>
				<div class="checkbox-inline custom-checkbox custom-control">
					<label>
						<input type="checkbox" />
						<span class="custom-control-indicator"></span>
						@Localizer["Approve spot"]
					</label>
				</div>*@
			</div>
		@switch (Model.BookingType)
		{
			case BookingTypeEnum.Retail:
				<text>
				</text>
				break;
			default:
				<text>
			<div id="duration-info-panel" data-bind="with: durationInfo">
				<div class="col-md-6">
					<div class="col-md-8">
						<label>
							@Localizer["Max"]:
						</label>
					</div>
					<div class="col-md-4">
						<span class="text-danger" data-bind="text: maxDuration"></span>
					</div>
					<div class="col-md-8">
						<label>
							@Localizer["Used"]:
						</label>
					</div>
					<div class="col-md-4">
						<span class="text-warning" data-bind="text: usedDuration"></span>
					</div>
					<div class="col-md-8">
						<label>
							@Localizer["Remaining"]:
						</label>
					</div>
					<div class="col-md-4">
						<span class="text-success" data-bind="text: remainingDuration"></span>
					</div>
				</div>
				<div class="col-md-6">
					<div class="col-md-8">
						<label>
							@Localizer["Max book"]:
						</label>
					</div>
					<div class="col-md-4">
						<span class="text-danger" data-bind="text: maxDurationBookingType"></span>
					</div>
					<div class="col-md-8">
						<label>
							@Localizer["Used"]:
						</label>
					</div>
					<div class="col-md-4">
						<span class="text-warning" data-bind="text: usedDurationBookingType"></span>
					</div>
					<div class="col-md-8">
						<label>
							@Localizer["Remaining"]:
						</label>
					</div>
					<div class="col-md-4">
						<span class="text-success" data-bind="text: remainingDurationBookingType"></span>
					</div>
				</div>
			</div>
			</text>
				break;
		}
			<hr />

			<div class="col-md-6">
				<div class="form-group text-center">
					<button data-bind="click: onCreateBtnClick" type="button" class="btn btn-primary-outline"><span class="icon icon-plus"></span> @Localizer["Add more spot"]</button>
				</div>
			</div>
			<div class="col-md-6">
				<div class="form-group text-center">
					<button data-bind="click: onSaveBtnClick" type="button" class="btn btn-success-outline"><span class="icon icon-action-save"></span> @Localizer["Save spot"]</button>
				</div>
			</div>
			<div class="col-md-6">
				<div class="form-group text-center">
					<button type="button" disabled class="btn btn-primary-outline"><span class="icon icon-print"></span></button>
					<button type="button" disabled class="btn btn-primary-outline"><span class="icon icon-search"></span></button>
					<button type="button" disabled class="btn btn-primary-outline"><span class="icon icon-doc"></span></button>
				</div>
			</div>
			<div class="col-md-6">
				<div class="form-group text-center">
					<button data-bind="click: onDeleteBtnClick" disabled type="button" class="btn btn-danger-outline"><span class="icon icon-action-delete"></span> @Localizer["Delete spot"]</button>
				</div>
			</div>
			<div class="col-md-6">
				<div class="checkbox-inline custom-checkbox custom-control">
					<label>
						<input type="checkbox" />
						<span class="custom-control-indicator"></span>
						@Localizer["Print current date"]
					</label>
				</div>
			</div>
		</form>
	</div>
</div>

<script>
	require(['jquery', 'knockout'], function ($, ko) {

		var localizer = {
			delete: "@Localizer["Delete"]",
			edit: "@Localizer["Edit"]",
			inputNotValid: "@Localizer["Input not valid"]",
			pleaseSelectTVC: "@Localizer["Please select a TVC!"]",
		};
		var model = {
			annexContractAssetId: "@Model.AnnexContractAssetId",
			isPositionCost: @Model.IsPositionCost.ToString().ToLower(),
			enablePositionInput : @Model.IsPositionCost.ToString().ToLower(),
			position: "@Model.Position",
			timeBandId: "@Model.TimeBandId",
			timeBandSliceId : "@Model.TimeBandSliceId",
			bookingType : @((int)Model.BookingType),
		};

		var timebandSliceOption = function (id, name) {
			this.name = name;
			this.id = id;
		};
		var addBookingViewModel = {
			isCreateMode: ko.observable(false),
			isEditMode: ko.observable(false),
			onCreateBtnClick: function () {
				console.log("onCreateBtnClick");
				var _this = this;
				//	$("#add-spotBooking-form").submit();
				if($("#AnnexContractAssetId").val() == '')
					alert(localizer.pleaseSelectTVC);

				_this.isCreateMode(true);
				$("#BroadcastDate").focus();
			},
			onSaveBtnClick: function () {
				console.log("onSaveBtnClick");
				var _this = this;
				console.log(_this.annexContractAssetId());
				console.log($("#AnnexContractAssetId").val());
				if($("#AnnexContractAssetId").val() != '')
					$("#add-spotBooking-form").submit();
				else
					alert(localizer.pleaseSelectTVC);
			},
			onDeleteBtnClick: function () {
				console.log("onDeleteBtnClick");

			},
			onCreateFormSubmit: function (d, e) {
				var _this = this;
				console.log("onCreateFormSubmit");
				_this.network.createSpotBooking();
			},
			network: {
				createSpotBooking: function () {
					var _this = addBookingViewModel;
					var form = $("#add-spotBooking-form");
					console.log(form.serialize());
					if(form.valid())
					{
						$.ajax({
							url: form.attr('action'),
							method: form.attr('method'),
							data: form.serialize(),
							success: function (response) {
								console.log(response);
								if (typeof response == 'object') {
									if (response.Succeeded) {
										notification.show(response.Message);

										_this.refresh.refreshSpotBookingList(response.Id);

									}
									else {
										alert(response.Message);
									}
								}
								else {
									alert(response);
								}
							},
							error: function () {

							}
						});

					}
					else{
						alert(localizer.inputNotValid);
					}
				}

			},
			refresh: {
				refreshSpotBookingList: function (dataItemId) {
					var grid = $("#grid-spotBooking").data("kendoGrid");
					if (grid) {
						grid.options.settings.dataItemId = dataItemId;
						console.log(grid);
						//	grid.refresh();
						grid.dataSource.read();
					}
				}
			},
			annexContractAssetId: ko.observable(),
			isPositionCost: ko.observable(false),
			enablePositionInput: ko.observable(false),
			broadcastDate: ko.observable($("#BroadcastDate").val()),
			position: ko.observable(),
			timeBandId: ko.observable(),
			timeBandSliceId: ko.observable(),
			enableTimeBandSliceSelect: ko.observable(false),
			durationInfo: {
				maxDuration: ko.observable("0"),
				usedDuration: ko.observable("0"),
				remainingDuration: ko.observable("0"),

				maxDurationBookingType: ko.observable("0"),
				usedDurationBookingType: ko.observable("0"),
				remainingDurationBookingType: ko.observable("0"),
			},
			durationByTypes: ko.observable(),
			timebandSliceOptions: ko.observableArray(),
			onClearBtnClick: function(){
				var _this = this;
				_this.timeBandSliceId("");
				_this.timeBandId("");
				_this.isPositionCost(false);
				_this.position("");
				_this.enablePositionInput(false);

			},
			onIsPositionCostChange: function (data, event) {
				var _this = this;
				console.log(event);
				var checked = event.target.checked;
				_this.enablePositionInput(checked);
				_this.position("");
			},
			onTimeBandSliceSelectChange: function () {
				var _this = this;
				$("#ko-duration-by-type").empty();
				if (_this.timeBandSliceId() != "") {
					_this.GetInfoDuration();
				}
			},
			onBroadcastDateChange: function () {
				var _this = this;
				$("#ko-duration-by-type").empty();
				if (_this.broadcastDate() && _this.timeBandSliceId()) {
					_this.GetInfoDuration();
				};
			},
			onTimeBandSelectChange: function (data, event) {
				var _this = this;
				if (_this.timeBandId()) {
					_this.enableTimeBandSliceSelect(true);
					_this.timebandSliceOptions([]);
					$.ajax({
						url: "Manager/TimeBand/GetAllTimeBandSliceByTimeBandId",
						type: 'GET',
						data: {
							timeBandId: _this.timeBandId(),
							bookingType: model.bookingType
						},
						success: function (response) {
							console.log(response);
							var data = response.Data;
							$.each(data, function (i, v) {
								_this.timebandSliceOptions.push(
									new timebandSliceOption(v.Id, v.Name));
							});


						}
					});

				}
				else {
					_this.enableTimeBandSliceSelect(false);
					_this.timebandSliceOptions([]);
				}
			},
			onRefreshDurationBtnClick: function () {
				var _this = this;
				if (_this.timeBandSliceId()) {
					_this.GetInfoDuration();
				}
			},

			GetMaxDuration: function () {
				var _this = this;
				if (_this.timeBandSliceId())
				{
					$.ajax({
						url: "Manager/TimeBandSlice/GetMaxDuration",
						type: 'GET',
						data: {
							timeBandSliceId: _this.timeBandSliceId(),
							broadcastDate: _this.broadcastDate(),
						},
						success: function (response) {
							console.log(response);
							var data = response;
							var maxDuration = 0;
							if(data.MaxDuration)
								maxDuration = data.MaxDuration;
							//	_this.AppendMaxDuration(data);
							_this.durationInfo.maxDuration(maxDuration);

							var timeBandSliceDurationByTypes = data.TimeBandSliceDurationByTypes;
							_this.durationInfo.maxDurationBookingType("0"); // reset
							$.each(timeBandSliceDurationByTypes, function(i,v){
								if(v.BookingTypeId == model.bookingType){
									_this.durationInfo.maxDurationBookingType(v.Duration.toString());
								}
							});

							_this.GetUsedDuration();

							_this.getUsedDurationByBookingType();
						}
					});
				}
			},
			GetUsedDuration: function () {
				var _this = this;
				_this.durationInfo.usedDuration("0"); // reset
				if (_this.timeBandSliceId() && _this.broadcastDate()) {

					$.ajax({
						url: "Booking/Spot/GetUsedDuration",
						type: 'GET',
						data: { timeBandSliceId: _this.timeBandSliceId(), broadcastDate: _this.broadcastDate() },
						success: function (response) {
							console.log("UsedDuration:",response);
							var data = response;
							_this.durationInfo.usedDuration(data.toString());


							_this.calculationRemainingDuration();
						}
					});
				}
			},
			calculationRemainingDuration: function () {
				var _this = this;
				var max = _this.durationInfo.maxDuration();
				var used = _this.durationInfo.usedDuration();
				var remaining = parseInt(max) - parseInt(used);
				console.log("remaining:",remaining);
				_this.durationInfo.remainingDuration(remaining.toString());
			},
			calculationRemainingDurationBookingType: function () {
				var _this = this;
				var max = _this.durationInfo.maxDurationBookingType();
				var used = _this.durationInfo.usedDurationBookingType();
				var remaining = parseInt(max) - parseInt(used);
				_this.durationInfo.remainingDurationBookingType(remaining.toString());
			},
			AppendMaxDuration: function (timeBandSlice) {
				var _this = this;
				_this.maxDuration(timeBandSlice.MaxDuration);
				var durationByTypes = [];

				$.each(timeBandSlice.TimeBandSliceDurationByTypes, function (i, t) {

					durationByTypes.push({ bookingTypeName: t.BookingTypeName, maxDuration: t.Duration, bookingTypeId: t.BookingTypeId });

					_this.getUsedDurationByType({
						broadcastDate: _this.broadcastDate(),
						timeBandSliceId: _this.timeBandSliceId(),
						bookingTypeId: t.bookingTypeId,
					});
					_this.durationByTypes(durationByTypes);
				});
			},
			getUsedDurationByType: function (data) {
				$.ajax({
					url: "Booking/Spot/GetUsedDurationByType",
					type: 'GET',
					data: data,
					success: function (response) {
						console.log("used duration by type ", response);
						var _data = response;
						$("span[data-bookingtypeid=" + data.bookingTypeId + "]").html(_data);
					}
				});
			},
			getUsedDurationByBookingType: function () {
				var _this = this;

				_this.durationInfo.usedDurationBookingType("0"); // reset
				var data = {
					broadcastDate: _this.broadcastDate(),
					timeBandSliceId: _this.timeBandSliceId(),
					bookingTypeId: model.bookingType,
				}

				$.ajax({
					url: "Booking/Spot/GetUsedDurationByType",
					type: 'GET',
					data: data,
					success: function (response) {
						console.log("used duration by type ", response);
						var _data = response;
						_this.durationInfo.usedDurationBookingType(_data);
						_this.calculationRemainingDurationBookingType();
						//	$("span[data-bookingtypeid=" + data.bookingTypeId + "]").html(_data);
					}
				});
			},
			GetInfoDuration: function () {
				var _this = this;
				_this.GetMaxDuration();

			},
		};
		ko.applyBindings(addBookingViewModel, $("#add-spotBooking-form")[0]);

	});
</script>