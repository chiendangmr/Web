
@inject ICustomerViewService _customerViewService

<div class="panel panel-flex panel-default">
	<div class="panel-heading">
		<div class="dashhead">
			<div class="dashhead-titles">
				<div class="dashhead-title">
					<h2> @ViewBag.Title </h2>
				</div>
			</div>
			<div class="dashhead-toolbar btn-toolbar">
				<button class="btn btn-primary-outline create"> <span class="icon icon-plus"></span> @Localizer["Create"] </button>
			</div>
		</div>
		<div class="flextable table-actions">
			<div class="flextable-item flextable-primary">
				<div class="btn-toolbar-item input-with-icon" style="width: 70%; max-width: 600px;">
					<span class="icon icon-search"></span>
					<input type="search" id="filterText" data-bind="value: filterText, event: {keyup: onFilterTextKeyUp,blur: onFilterTextBlur}" list="items" class="form-control input-block" placeholder="@Localizer["Search..."]">
					<datalist id="items">
					</datalist>
				</div>
				<div class="btn-toolbar-item input-with-icon">
					<button id="search-btn" data-bind="click: onSearchBtnClick" class="btn btn-primary-outline"><span class="icon icon-search"></span></button>
				</div>
				<div class="btn-toolbar-item input-with-icon">
					<button id="clearFilter" data-bind="click: onClearFilterClick" class="btn btn-primary-outline"><span class="icon icon-erase"></span></button>
				</div>
			</div>
			<div class="flextable-item">
				<div class="label label-primary">Per</div>
				<span>@Localizer[CustomerTypeEnum.Permanent.GetDisplayName()]</span>
			</div>
			<div class="flextable-item">
				<div class="label label-info">Non</div>
				<span>@Localizer[CustomerTypeEnum.NoPermanent.GetDisplayName()]</span>
			</div>
			<div class="flextable-item">
				<div class="checkbox custom-control custom-checkbox">
					<label>
						<input id="filterDisabled" type="checkbox" class="form-control">
						<span class="custom-control-indicator"></span>
						@Localizer["Include Disabled"]
					</label>
				</div>
			</div>
		</div>
	</div>
	<div class="panel-body">
		<div id="tree-list"></div>
	</div>
</div>


<div id="modal" class="modal fade" tabindex="-1" role="dialog">
	<div class="modal-dialog" role="document">
		<div class="modal-content">

		</div>
	</div>
</div>

<script id="edit-template" type="text/x-kendo-template">
	<div class="btn-group">
		<button data-id="#: id #" class="btn btn-danger-outline btn-sm delete"> <span class="icon icon-trash"></span> @Localizer["Delete"]</button>
		<button data-id="#: id #" class="btn btn-warning-outline btn-sm edit"><span class="icon icon-action-edit"></span> @Localizer["Edit"]</button>
		@*<a href="Manager/AnnexContract/Index/#=id#" data-id="#: id #" class="btn btn-success-outline btn-sm bookings">@Localizer["Contracts"]</a>
		<a href="Manager/AnnexContract/CreateContract/#=id#" data-id="#: id #" class="btn btn-success-outline btn-sm bookings">@Localizer["Add Contracts"]</a>*@
	</div>
</script>

<script id="customer-type-template" type="text/x-kendo-template">
	#if(type == 1){#
	<div class="label label-primary">Per</div>
	#}else{#
	#if(type == 2){#
	<div class="label label-info">Non</div>
	#}else{#
	<span>x</span>
	#}#
	#}#
</script>

<ul id="context-menu">
	<li data-action="delete">
		<span class="icon icon-action-delete"></span> @Localizer["Delete"]
	</li>
	<li data-action="edit">
		<span class="icon icon-action-edit"></span> @Localizer["Edit"]
	</li>
	<li data-action="check-booking-count">
		<span class="icon icon-action-edit"></span> @Localizer["Check booking count"]
	</li>
</ul>
<script>
	require(['module/customer'], function (customer) {
		customer.init({
			url: {
				controller: "Customer",
				getAll: "GetAllCustomer",
			},
			model: {
				id: 'Id',
				parentId: 'ParentId',
				fields: {
					ParentId: { field: "ParentId", nullable: true },
					name: { field: "Name", type: "text" },
					code: { field: "Code", type: "text" },
					codeForSort: { field: "CodeForSort", type: "text" },
					address: { field: "Address", type: "text" },
					phoneNumber: { field: "PhoneNumber", type: "text" },
					faxNumber: { field: "FaxNumber", type: "text" },
					positionOfRepresentivePerson: { field: "PositionOfRepresentivePerson", type: "text" },
					representivePerson: { field: "RepresentivePerson", type: "text" },
					taxNumber: { field: "TaxNumber", type: "text" },
					typeName: { field: "TypeName", type: "text" },
					typeId: { field: "TypeId", type: "number" },
				}

			},
			sort: [
				{ field: 'codeForSort', dir: 'asc' }
			],
			columns: [
				{
					field: "codeForSort",
					title: "@Localizer["Code"]",
					width: "80px",
					template: "#=code#",
				},
				{
					field: 'name', title: "@Localizer["Name"]",
					width: "350px"
				},
				{
					field: 'address', title: "@Localizer["Address"]",
				},
				{
					field: 'phoneNumber', title: "@Localizer["Phone"]",
				},
				{
					field: 'faxNumber', title: "@Localizer["Fax"]",
				},
				{
					field: 'taxNumber', title: "@Localizer["Tax number"]",
				},
				{
					field: 'representivePerson', title: "@Localizer["representive Person"]",
				},
				{
					field: 'positionOfRepresentivePerson', title: "@Localizer["position Of Representive Person"]",
				},
				{
					field: 'typeName',
					title: "@Localizer["Type"]",
					template: function (dataItem) {
						return kendo.template($("#customer-type-template").html())({ type: dataItem.typeId });
					},
					width: '60px',
				},
				{
					field: "",
					title: "@Localizer["Edit"]",
					template: kendo.template($("#edit-template").html()),
					width: "180px",
				}

			],
			function: {
				customOnBound: function(grid){

					$('input.header[type="checkbox"]').off().on('change', function(e){
						console.log(e);
						var checked = e.target.checked;
						$('input.contract[type="checkbox"]').each(function(i,v){
							v.checked = checked;
						});
					});

				},
				onChange: function () {
					var grid = this;
					var selected = grid.dataItem(grid.select());
					$("#detail-panel-body").load("/Manager/Customer/Detail/" + selected.id, function () {
						$("#detail-panel-body").animate({ opacity: 0.1 }, 0).animate({ opacity: 1 }, 200);
					});
				}
			},
			filter: function (filterText) {
				var grid = $("#tree-list").data("kendoTreeList");
				var dataSource = grid.dataSource;
				dataSource.filter({
					logic: "or",
					filters: [
					{ field: "name", operator: "contains", value: filterText },
					{ field: "address", operator: "contains", value: filterText },
					{ field: "code", operator: "contains", value: filterText }
					]
				});
			},
		});




		$("#context-menu").kendoContextMenu({
			//	alignToAnchor: true
			target: "#tree-list",
			filter: "tr",
			select: function (e) {
				var tree = $("#tree-list").data("kendoTreeList")
				var trUid = e.target.dataset.uid;;
				var dataItem = tree.dataSource.getByUid(trUid);
				var action = e.item.dataset.action;
				switch (action) {
					case "edit":
						break;
					case "delete":
						break;
					case "check-booking-count":
						if (dataItem.id != undefined)
						{
							$.ajax({
								url: "Manager/Customer/CheckSpotBookingCount/" + dataItem.id,
								success: function (response) {
									alert(response);
								}
							});
						}
						break;
				}
				// handle event
			}
		});

	});

</script>