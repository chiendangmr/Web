@{
	Layout = null;
}
@model SponsorProgramViewModel
@inject ISponsorProgramViewService _sponsorProgramViewService
@{
	var sponorProgramSelectItems = await _sponsorProgramViewService.GetCodeAndNameSelectListItemAsync();
	var defaultContractTypeSelectItems = await _sponsorProgramViewService.GetContractTypeSelectListItemAsync();
}
<form id="detail-form" data-bind="submit: onDetailFormSubmit" asp-area="Manager" asp-controller="SponsorProgram" asp-action="EditAPI" method="post" enctype="multipart/form-data" class="form-horizontal">
		<input asp-for="Id" type="hidden"/>
	<div class="col-md-3">
		<div class="form-group">
			<div class="col-md-4 control-label">
				<label asp-for="Code"></label>
			</div>
			<div class="col-md-8">
				<input asp-for="Code" class="form-control" type="text" />
				<span asp-validation-for="Code" class="text-danger"></span>
			</div>
		</div>
	</div>
	<div class="col-md-6">
		<div class="form-group">
			<div class="col-md-2 control-label">
				<label asp-for="Name"></label>
			</div>
			<div class="col-md-10">
				<input asp-for="Name" class="form-control" type="text" />
				<span asp-validation-for="Name" class="text-danger"></span>
			</div>
		</div>
	</div>
	<div class="col-md-3">
		<div class="form-group">
			<div class="col-md-4 control-label">
				<label asp-for="Description"></label>
			</div>
			<div class="col-md-8">
				<input asp-for="Description" class="form-control" type="text" />
				<span asp-validation-for="Description" class="text-danger"></span>
			</div>
		</div>
	</div>
	<div class="col-md-3">
		<div class="form-group">
			<div class="col-md-4 control-label">
				<label asp-for="DefaultContractTypeId"></label>
			</div>
			<div class="col-md-8">
				<select asp-for="DefaultContractTypeId" class="form-control" asp-items="defaultContractTypeSelectItems">
					<option value="">@Localizer["Choose..."]</option>
				</select>
				<span asp-validation-for="DefaultContractTypeId" class="text-danger"></span>
			</div>
		</div>
	</div>
	<div class="col-md-6">
		<div class="form-group">
			<div class="col-md-2 control-label">
				<label asp-for="ParentId"></label>
			</div>
			<div class="col-md-10">
				<select asp-for="ParentId" class="form-control" asp-items="sponorProgramSelectItems">
					<option value="">@Localizer["None"]</option>
				</select>
				<span asp-validation-for="ParentId" class="text-danger"></span>
			</div>
		</div>
	</div>
	<div class="col-md-3">
		<div class="form-group">
			<div class="col-md-4 control-label">
				<label asp-for="EndDate"></label>
			</div>
			<div class="col-md-8">
				<input asp-for="EndDate" class="form-control" type="date" />
				<span asp-validation-for="EndDate" class="text-danger"></span>
			</div>
		</div>
	</div>
	<div class="col-md-4 col-md-offset-4">
		<button type="button" data-bind="click: onCreateBtnClick, attr : {'disabled' : isCreateMode}" class="btn btn-primary-outline" onclick=""><span class="icon icon-plus"></span> @Localizer["Create new"] </button>
		<button type="button" data-bind="click: onSaveBtnClick" class="btn btn-warning-outline" onclick=""><span class="icon icon-action-save"></span> @Localizer["Save"] </button>
		<button type="button" data-bind="click: onDeleteBtnClick, attr : {'disabled' : isCreateMode}" class="btn btn-danger-outline" onclick=""><span class="icon icon-action-delete"></span> @Localizer["Delete"] </button>
	</div>
</form>




<script>
	require(['module/manager', 'knockout'], function (manager, ko) {
		var localizer = {
			delete: "@Localizer["Delete"]",
			edit: "@Localizer["Edit"]",
			areYouSure: "@Localizer["Are you sure?"]",
			inputNotValid: "@Localizer["Input not valid"]",
		};
		var model = {
			id: '@Model.Id',
			code: "@Model.Code",
			};
		var form = $("#detail-form");

		var viewModel = {
			code: ko.observable(model.code),
			onCodeKeyUp: function (d, e) {
				console.log("onCodeKeyUp");
				var _this = this;
				if (e.keyCode == 13) {
					_this.network.findByCode(_this.code());
					return false; // ignore default event
				}
				return false;
			},
			isCreateMode: ko.observable(false),
			onCreateBtnClick: function () {
				console.log("onCreateBtnClick");
				var _this = this;
				_this.isCreateMode(true);
				$("#detail-panel-body").animate({ opacity: 0.1 }, 0).animate({ opacity: 1 }, 200);
				form.find("#Code").focus();
				form.find("input[type=text], textarea").val("");
			//	_this.network.createSponsorProgram();
			},
			onSaveBtnClick: function () {
				console.log("onSaveBtnClick");
				var _this = this;
				if (_this.isCreateMode())
					_this.network.createSponsorProgram();
				else
				{
					if (confirm(localizer.edit))
						form.submit();
				}
			},
			onDeleteBtnClick: function () {
				console.log("onDeleteBtnClick");
				var _this = this;
				if (confirm(localizer.delete)) {
					_this.network.deleteSponsorProgram();
				}
				else {

				 }

			},
			onCheckBookingCountBtnClick: function () {
				console.log("onCheckBookingCountBtnClick");
				$.ajax({
					url: "Manager/SponsorProgram/CheckSpotBookingCount/@Model.Id",
					success: function (response) {
						alert(response);
					}
				});
			},
			onDetailFormSubmit: function (d, e) {
				var _this = this;
				console.log("onDetailFormSubmit");
				_this.network.editSponsorProgram();
			},
			network: {
				editSponsorProgram: function () {
					console.log(form.serialize());
					if (form.valid()) {
						$.ajax({
							url: form.attr('action'),
							method: form.attr('method'),
							data: form.serialize(),
							success: function (response) {
								console.log(response);
								if (typeof response == 'object') {
									if (response.Succeeded) {
										notification.show(response.Message);

										refreshTree(response.Id);
									}
									else {
										alert(response.Message);
									}
								}
								else {
									alert(response);
								}
							},
							error: function () {

							}
						});

					}
					else
						alert(localizer.inputNotValid);
				},
				createSponsorProgram: function () {
					var createUrl = "Manager/SponsorProgram/CreateAPI";
					if (form.valid()) {
						$.ajax({
							url: createUrl,
							method: form.attr('method'),
							data: form.serialize(),
							success: function (response) {
								console.log(response);
								if (typeof response == 'object') {
									if (response.Succeeded) {
										notification.show(response.Message);
										var urlPath = '/Manager/SponsorProgram/Detail/' + response.Id;
										$('#detail-panel-body').load(urlPath);
											refreshTree(response.Id);

									}
									else {
										alert(response.Message);
									}
								}
								else {
									alert(response);
								}
							},
							error: function () {

							}
						});
					}
					else
						alert(localizer.inputNotValid);
				},
				deleteSponsorProgram: function () {
					var deleteUrl = "Manager/SponsorProgram/DeleteAPI";
					console.log(form.serialize());
					$.ajax({
						url: deleteUrl,
						method: form.attr('method'),
						data: form.serialize(),
						success: function (response) {
							console.log(response);
							if (typeof response == 'object') {
								if (response.Succeeded) {
									notification.show(response.Message);
									refreshTree("");
								}
								else {
									alert(response.Message);
								}
							}
							else {
								alert(response);
							}
						},
						error: function () {

						}
					});
				},
				findByCode: function (code) {
					var url = "Manager/AnnexContract/FindByCodeAPI";
					$.ajax({
						url: url,
						method: 'GET',
						data: {
							code: code,
							bookingType: model.bookingType
						},
						success: function (response) {
							console.log(response);
							if (typeof response == 'object') {
								if (response.Succeeded) {
									notification.show(response.Message);
									var urlPath = '/AnnexContract/NormalBooking/Detail/' + response.Id
									$('#detail-panel-body').load(urlPath);
								}
								else {
									alert(response.Message);
								}
							}
							else {
								alert(response);
							}
						},
						error: function () {

						}
					});
				}
			}
		};
		ko.applyBindings(viewModel, $("#detail-form")[0]);

		function refreshTree(id) {
			var tree = $("#tree-list").data("kendoTreeList");
			tree.options.settings.dataItemId = id;
			if (tree)
				tree.dataSource.read();

		//	tree.options.settings.dataItemId = '';
		}

	});
</script>



