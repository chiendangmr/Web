@{
	ViewBag.Title = Localizer["Booking manager"].Value;
}
@model AnnexContractIndexViewModel
@inject IAnnexContractViewService _annexContractViewService
@inject ICustomerViewService _customerViewService
@{
	var customerNameList = await _customerViewService.GetNameListAsync();
	var annexContractCodeList = await _annexContractViewService.GetCodeListAsync();
	var customerTypeSelectItems = await _customerViewService.GetCustomerTypeSelectListItemAsync();
}
<div class="container-vertical-flex">
	<div class="flex flex-3">
		<div class="container-flex">
			<div class="flex flex-3">
				<div class="panel panel-flex panel-default">
					<div class="panel-heading">
						<div class="dashhead">
							<div class="dashhead-titles">
								<div class="dashhead-title">
									<h4>@Localizer["Annex contract"]</h4>
								</div>
							</div>
							<div class="dashhead-toolbar btn-toolbar">
								@*<button id="btn-add" class="btn btn-sm btn-primary-outline create annexContract"> <span class="icon icon-plus"></span> @Localizer["Add contract"] </button>*@
							</div>
						</div>
						<div class="flextable table-actions">
							<div class="flextable-item flextable-primary">
								<div class="btn-toolbar-item input-with-icon" style="width: 70%; max-width: 600px;">
									<span class="icon icon-search"></span>
									<input type="search" id="filterText" data-bind="value: filterText,
					event: {keyup: onFilterTextKeyUp,blur: onFilterTextBlur}" list="items" class="form-control input-block " placeholder="@Localizer["Search..."]">
									<datalist id="items">
										<select name="annexContracts" asp-items="annexContractCodeList"></select>
										<select name="customers" asp-items="customerNameList"></select>
									</datalist>
								</div>
								<div class="btn-toolbar-item input-with-icon">
									<button id="clearFilter" data-bind="click: onClearFilterClick" class="btn btn-primary-outline"><span class="icon icon-erase"></span></button>
								</div>
							</div>
							<div class="flextable-item">
								<button class="btn btn-primary-outline disabled"><span class="icon icon-print"></span> @Localizer["Print"]</button>
							</div>
						</div>
					</div>
					<div class="panel-body">
						<div id="annex-contract-grid"></div>
					</div>
				</div>
			</div>
			<div class="flex flex-2" id="div-annexDetail">

			</div>
		</div>
	</div>
	<div class="flex flex-5">
		<div class="container-flex"  id="div-spotBooking">
		</div>
	</div>
</div>


<script id="edit-template" type="text/x-kendo-template">
	<div class="btn-group">
		<button data-id="#: id #" class="btn btn-danger-outline btn-sm delete annexContract"><span class="icon icon-action-delete"></span></button>
		<button data-id="#: id #" class="btn btn-warning-outline btn-sm edit annexContract"><span class="icon icon-action-edit"></span></button>
		<a href="Manager/SpotBooking/IndexContract/#=id#" target="_blank" data-id="#: id #" class="btn btn-success-outline btn-sm bookings"><span class="icon icon-book"></span>@Localizer["Detail"]</a>
		<a href="Report/Report/BroadcastCertificate/#=id#" target="_blank" data-id="#: id #" class="btn btn-success-outline btn-sm bookings"><span class="icon icon-print"></span></a>
	</div>
</script>

<script id="booking-type-template" type="text/x-kendo-template">
	#if(type == 7){#
	<div class="label label-warning">Tr&ensp;</div>
	#}else{#
	#if(type == 5){#
	<div class="label label-info">In&ensp;</div>
	#}else{#
	#if(type == 6){#
	<div class="label label-primary">Out</div>
	#}else{#
	#if(type == 3){#
	<div class="label label-default">No</div>
	#}else{#
	#if(type == 8){#
	<div class="label label-danger">Be</div>
	#}else{#

	#}#
	#}#
	#}#
	#}#
	#}#
</script>

<script>
	require(['module/spot-booking'], function (module) {
		module.init({
			url: {
				controller: "AnnexContract",
				getAll: "GetAllAnnexContract",
			},
			DOMclass: {
				entity: '.annexContract',
			},
			DOMid: {
				grid: 'annex-contract-grid',
			},
			model: {
				id: 'Id',
				fields: {
					receiveDate: { field: 'ReceiveDate', type: "date" },
					signDate: { field: 'ReceiveDate', type: "date" },
					code: { field: 'Code', type: "text" },
					customerName: { field: 'CustomerName', type: "text" },
					bookingTypeName: { field: 'BookingTypeName', type: "text" },
					bookingTypeId: { field: 'BookingTypeId', type: "number" },
					sponsorProgramName: { field: 'SponsorProgramName', type: "text" },
					sponsorTypeName: { field: 'SponsorTypeName', type: "text" },
					sponsorTypeId: { field: 'SponsorTypeId', type: "number" },
					scheduleCampaign: { field: 'ScheduleCampaign', type: "text" },
					content: { field: 'Content', type: "text" },
				},
			},
			columns: [
				{ field: 'code', title: "@Localizer["Code"]", width: "80px" },
				{ field: 'customerName', title: "@Localizer["Customer Name"]" },
				{
					field: 'bookingTypeName',
					title: "@Localizer["Booking Type"]",
					template: function (dataItem) {
						return kendo.template($("#booking-type-template").html())({ type: dataItem.bookingTypeId });
					},
					width: '60px',
				},
				{
					field: 'receiveDate', title: "@Localizer["Receive Date"]",
					template: function (dataItem) {
						return kendo.template($("#date-template").html())({ date: dataItem.receiveDate });
					}
				},
				{
					field: 'signDate', title: "@Localizer["Sign Date"]",
					template: function (dataItem) {
						return kendo.template($("#date-template").html())({ date: dataItem.signDate });
					}
				},
				{ field: 'scheduleCampaign', title: "@Localizer["Schedule Campaign"]" },
				{ field: 'content' , title: "@Localizer["Content"]"},
				{
					field: "",
					title: "@Localizer["edit"]",
					template: kendo.template($("#edit-template").html()),
					width: "200px",
				}
			],
			function: {
				onChange: function (arg) {

					var grid = arg.sender;
					var selected = grid.dataItem(this.select());
					$("#div-spotBooking").load("Manager/SpotBooking" + "/IndexBooking/" + selected.id);
				}
			},
			filter: function (filterText) {
		var grid = $("#annex-contract-grid").data("kendoGrid");
		var dataSource = grid.dataSource;
		dataSource.filter({
			logic: "or",
			filters: [
			{ field: "code", operator: "contains", value: filterText },
			{ field: "customerName", operator: "contains", value: filterText },
			{ field: "scheduleCampaign", operator: "contains", value: filterText },
			{ field: "content", operator: "contains", value: filterText }
			]
		});
	}
	});
	});
</script>