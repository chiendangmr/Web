@{
	ViewBag.Title = Localizer["Timeband"].Value;
}
@inject ITimeBandViewService _timeBandViewService
@inject IChannelViewService _channelViewService
@{
//	var timeBandNames = await _timeBandViewService.GetNameListAsync();
	var channelNames = await _channelViewService.GetNameListAsync();
}
<style>
	.container-flex > .flex:not(:first-child) {
		margin-left: 5px;
	}

	.container-vertical-flex > .flex:not(:first-child) {
		margin-top: 5px;
	}

	.k-grouping-header {
		display: none;
	}
</style>
<div class="container-flex">
	<div class="flex flex-3">
		<div class="panel panel-flex panel-default">
			<div class="panel-heading">
				<div class="dashhead">
					<div class="dashhead-titles">
						<div class="dashhead-title">
							<h2> @ViewBag.Title</h2>
						</div>
					</div>
					<div class="dashhead-toolbar">
						<button id="btn-add-timeband" class="btn btn-sm btn-primary-outline" href="/Manager/TimeBand/Create"> <span class="icon icon-plus"></span> @Localizer["Add"] </button>

					</div>
				</div>
				<div id="timeBandFilter" class="flextable table-actions">
					<div class="flextable-item flextable-primary">
						<div class="btn-toolbar-item input-with-icon" style="width: 70%; max-width: 600px;">
							<span class="icon icon-search"></span>
							<input type="search" id="filterText" data-bind="value: filterText, 
						   event: {keyup: onFilterTextKeyUp,blur: onFilterTextBlur}" list="items" class="form-control input-block" placeholder="@Localizer["Search..."]">
							<datalist id="items">
								<select name="channels" asp-items="channelNames"></select>
							</datalist>
						</div>
						<div class="btn-toolbar-item input-with-icon">
							<button id="search-btn" data-bind="click: onSearchBtnClick" class="btn btn-primary-outline"><span class="icon icon-search"></span></button>
						</div>
						<div class="btn-toolbar-item input-with-icon">
							<button id="clearFilter" data-bind="click: onClearFilterClick" class="btn btn-primary-outline"><span class="icon icon-erase"></span></button>
						</div>
					</div>
					<div class="flextable-item">
						<div class="checkbox custom-control custom-checkbox">
							<label>
								<input id="filterDisabled" type="checkbox" class="form-control">
								<span class="custom-control-indicator"></span>
								@Localizer["Include Disabled"]
							</label>
						</div>
					</div>
				</div>
			</div>
			<div class="panel-body">
				<div id="grid-time-band"></div>
			</div>
		</div>
	</div>
	<div class="flex flex-2">
		<div class="container-vertical-flex">
			<div class="flex flex-1">
				<div class="panel panel-flex" id="timeBandDetailPanel"></div>
			</div>
		</div>
	</div>
</div>

<div id="modal" class="modal fade" tabindex="-1" role="dialog">
	<div class="modal-dialog" role="document">
		<div class="modal-content">

		</div>
	</div>
</div>

<script id="edit-template" type="text/x-kendo-template">
	<div class="btn-group">
		<button data-id="#: id #" class="btn btn-danger-outline btn-sm delete timeband"> @Localizer["Delete"]</button>
		<button data-id="#: id #" class="btn btn-warning-outline btn-sm edit timeband"> @Localizer["Edit"]</button>
	</div>
</script>
<script id="dayOfWeeks-template" type="text/x-kendo-template">
	<div class="day-of-week" data-dayofweek="#=dayOfWeek#">
		#=dayOfWeekString#
	</div>
</script>
<script id="dayOfWeeks-tooltip-template" type="text/x-kendo-template">
	#;#
	<input type="checkbox" #=dayOfWeek.Monday# />
	<span> Monday   </span> &emsp;
	<input type="checkbox" #=dayOfWeek.Tuesday# />
	<span> Tuesday   </span> &emsp;
	<input type="checkbox" #=dayOfWeek.Wednesday# />
	<span> Wednesday   </span> &emsp;
	<input type="checkbox" #=dayOfWeek.Thursday# />
	<span> Thursday   </span> &emsp;
	<input type="checkbox" #=dayOfWeek.Friday# />
	<span> Friday   </span> &emsp;
	<p></p>
	<input type="checkbox" #=dayOfWeek.Saturday# />
	<span> Saturday   </span> &emsp;
	<input type="checkbox" #=dayOfWeek.Sunday# />
	<span> Sunday   </span> &emsp;
</script>

<script id="startTime-template" type="text/x-kendo-template">
	#: kendo.toString(kendo.parseDate(time), "hh:mm tt")  #
</script>


<script id="endTime-template" type="text/x-kendo-template">
	<div class="endTime" data-tooltip="#=dayOffset#">
		#: kendo.toString(kendo.parseDate(time), "hh:mm tt")  #
	</div>
</script>

<script>
	require(['module/timeband'], function (module) {
		module.init({
			model: {
				id: 'Id',
			//	parentId: 'ParentId',
				fields: {
					parentId: { field: "ParentId", nullable: true },
					channelName: { field: "ChannelName", type: "text" },
					name: { field: "Name", type: "text" },
					nameForSort: { field: "NameForSort", type: "text" },
					startTimeOfDay: { field: "StartTimeOfDay", type: "date" },
					duration: { field: "Duration", type: "number" },
					dayOfWeeks: { field: "DayOfWeeks", type: "number" },
					description: { field: "Description", type: "text" },
					timeBandDescription: { field: "TimeBandDescription", type: "text" },
				},
			},
			columns: [
				{
					field: "channelName", title: "@Localizer["Channel"]",
					width: "80px",
				},
				{
					field: "nameForSort", title: "@Localizer["TimeBand"]",
					width: "80px",
					template: "#=name#",
				},
				{
					field: "startTimeOfDay", title: "@Localizer["Start time"]",
					template: function (dataItem) {
						return kendo.template($("#startTime-template").html())({ time: dataItem.startTimeOfDay });
					},
					width: "80px",
				},
					{
						field: "duration",
						title: "@Localizer["End time"]",
						template: function (dataItem) {
							var startTime = dataItem.startTimeOfDay;
							var timeFrom0h = (startTime.getHours() * 60 * 60 + startTime.getUTCMinutes() * 60) * 1000;
							var timeLeftFrom24h = 24 * 60 * 60 * 1000 - timeFrom0h;
							var dayOffset = Math.floor((dataItem.duration * 1000 - timeLeftFrom24h) / (24 * 60 * 60 * 1000));
							if ((dataItem.duration * 1000 - timeLeftFrom24h) > 0) {
								//	dayOffset = 1;
							}
							var endTimeMilisecond = startTime.getTime() + dataItem.duration * 1000;
							var endTime = new Date(endTimeMilisecond);
							//	debugger;
							dayOffsetAddADay = dayOffset + 1; // nextday
							if (dayOffsetAddADay == 1) dayOffsetAddADay = " "; // clear 1 day
							var dayOffsetString = "";
							if (dayOffset >= 0)
								dayOffsetString = "@Localizer["Next "]" + dayOffsetAddADay + "@Localizer[" day"]";
							if (dayOffset < 0)
								dayOffsetString = "@Localizer["In day"]";
							return kendo.template($("#endTime-template").html())({ time: endTime, dayOffset: dayOffsetString });
						},
						width: "80px",
					},
				{
					field: "dayOfWeeks", title: "@Localizer["Day of week"]",
					template: function (dataItem) {
						var dayOfWeekString = intToDayOfWeekString(dataItem.dayOfWeeks);
						return kendo.template($("#dayOfWeeks-template").html())({ dayOfWeekString: dayOfWeekString, dayOfWeek: dataItem.dayOfWeeks });
					},
					width: "100px",
				},
				{ field: "description", title: "@Localizer["Description"]" },
				{ field: "timeBandDescription", title: "@Localizer["Description from date"]" },
				{
					field: "",
					title: "@Localizer["Edit"]",
					template: kendo.template($("#edit-template").html()),
					width: "120px",
				}
			],
			filter:	function (filterText) {
				var grid = $("#grid-time-band").data("kendoTreeList");
				var dataSource = grid.dataSource;
				dataSource.filter({
					logic: "or",
					filters: [
					{ field: "channelName", operator: "contains", value: filterText },
					{ field: "name", operator: "contains", value: filterText },
					{ field: "description", operator: "contains", value: filterText }
					]
		});
	}
		});

	});
	class DayOfWeek {
		constructor(Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday) {
			this.Monday = Monday;
			this.Tuesday = Tuesday;
			this.Wednesday = Wednesday;
			this.Thursday = Thursday;
			this.Friday = Friday;
			this.Saturday = Saturday;
			this.Sunday = Sunday;
		}
	}
	function intToDayOfWeek(intDay) {
		var dayOfWeek = new DayOfWeek("", "", "", "", "", "", "");
		if ((intDay & 64) === 64) dayOfWeek.Sunday = "checked";
		if ((intDay & 32) === 32) dayOfWeek.Saturday = "checked";
		if ((intDay & 16) === 16) dayOfWeek.Friday = "checked";
		if ((intDay & 8) === 8) dayOfWeek.Thursday = "checked";
		if ((intDay & 4) === 4) dayOfWeek.Wednesday = "checked";
		if ((intDay & 2) === 2) dayOfWeek.Tuesday = "checked";
		if ((intDay & 1) === 1) dayOfWeek.Monday = "checked";
		return dayOfWeek;
	}
	function intToDayOfWeekString(intDay) {
		var dayOfWeek = "";
		if ((intDay & 1) === 1) dayOfWeek += "@Localizer["2 "]" + " ";
		if ((intDay & 2) === 2) dayOfWeek += "@Localizer["3 "]" + " ";
		if ((intDay & 4) === 4) dayOfWeek += "@Localizer["4 "]" + " ";
		if ((intDay & 8) === 8) dayOfWeek += "@Localizer["5 "]" + " ";
		if ((intDay & 16) === 16) dayOfWeek += "@Localizer["6 "]" + " ";
		if ((intDay & 32) === 32) dayOfWeek += "@Localizer["7 "]" + " ";
		if ((intDay & 64) === 64) dayOfWeek += "@Localizer["Su "]" + " ";
		if (intDay == 127)
			dayOfWeek = "@Localizer["All day"]"
		if (intDay == 0)
			dayOfWeek = "@Localizer["No day"]"
		return dayOfWeek;
	}
</script>