@{
	Layout = null;
}
@model TimeBandSliceIndexViewModel


<div class="container-vertical-flex">
	<div class="flex flex-0">
		<span class="h4">@Localizer["TimeBand"]: @Model.TimeBandName</span>
		<button class="btn btn-sm btn-primary-outline create timeBandDay pull-right"> <span class="glyphicon glyphicon-plus"></span> @Localizer["Add"] </button>
	</div>
	<div class="flex flex-1">
		<div id="grid-timeBandDay"></div>
	</div>
</div>

<script id="timeBandDay-edit-template" type="text/x-kendo-template">
	<div class="btn-group">
		<button data-id="#: id #" class="btn btn-danger-outline btn-sm delete timeBandDay">@Localizer["Delete"]</button>
		<button data-id="#: id #" class="btn btn-warning-outline btn-sm edit timeBandDay">@Localizer["Edit"]</button>
	</div>
</script>

<script id="dayOfWeeks-template" type="text/x-kendo-template">
	<div class="day-of-week" data-dayofweek="#=dayOfWeek#">
		#=dayOfWeekString#
	</div>
</script>

<script>
    require(['module/timeband-day'], function (module) {
    	module.init({
        	url: {
        		controller: "TimeBandDay",
        		getAll: "GetAllTimeBandDayByTimeBandId",
        		id: "@Model.TimeBandId",
        	},
        	DOMid: {
        		grid: 'grid-timeBandDay',
        	},
        	DOMclass: {
        		entity: ".timeBandDay",
        	},
        	data: {
				timeBandId : "@Model.TimeBandId"
        	},
    		model: {
    			id: 'Id',
    			fields: {
    				startDate: { field: "StartDate", type: "date" },
    				endDate: { field: "EndDate", type: "date" },
    				dayOfWeeks: { field: "DayOfWeeks", type: "number" },
    			},
    		},
    		columns: [
				{
					field: "dayOfWeeks", title: "@Localizer["Day of week"]",
    			template: function (dataItem) {
    				var dayOfWeekString = intToDayOfWeekString(dataItem.dayOfWeeks);
    				return kendo.template($("#dayOfWeeks-template").html())({ dayOfWeekString: dayOfWeekString, dayOfWeek: dataItem.dayOfWeeks });
    			},
    			},
				{
					field: "startDate",
					title: "@Localizer["Start Date"]",
					template: function (dataItem) {
						return kendo.template($("#date-template").html())({ date: dataItem.startDate });
					}
				},
				{
					field: "endDate",
					title: "@Localizer["End Date"]",
					template: function (dataItem) {
						return kendo.template($("#date-template").html())({ date: dataItem.endDate });
					}
				},
				{
					field: "",
					title: "@Localizer["Edit"]",
					template: kendo.template($("#timeBandDay-edit-template").html()),
					width: "200px",
				}

            ]
        });
    });


	//class DayOfWeek {
	//	constructor(Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday) {
	//		this.Monday = Monday;
	//		this.Tuesday = Tuesday;
	//		this.Wednesday = Wednesday;
	//		this.Thursday = Thursday;
	//		this.Friday = Friday;
	//		this.Saturday = Saturday;
	//		this.Sunday = Sunday;
	//	}
	//}
	function intToDayOfWeek(intDay) {
		var dayOfWeek = new DayOfWeek("", "", "", "", "", "", "");
		if ((intDay & 64) === 64) dayOfWeek.Sunday = "checked";
		if ((intDay & 32) === 32) dayOfWeek.Saturday = "checked";
		if ((intDay & 16) === 16) dayOfWeek.Friday = "checked";
		if ((intDay & 8) === 8) dayOfWeek.Thursday = "checked";
		if ((intDay & 4) === 4) dayOfWeek.Wednesday = "checked";
		if ((intDay & 2) === 2) dayOfWeek.Tuesday = "checked";
		if ((intDay & 1) === 1) dayOfWeek.Monday = "checked";
		return dayOfWeek;
	}
	function intToDayOfWeekString(intDay) {
		var dayOfWeek = "";
		if ((intDay & 1) === 1) dayOfWeek += "@Localizer["2 "]" + " ";
		if ((intDay & 2) === 2) dayOfWeek += "@Localizer["3 "]" + " ";
		if ((intDay & 4) === 4) dayOfWeek += "@Localizer["4 "]" + " ";
		if ((intDay & 8) === 8) dayOfWeek += "@Localizer["5 "]" + " ";
		if ((intDay & 16) === 16) dayOfWeek += "@Localizer["6 "]" + " ";
		if ((intDay & 32) === 32) dayOfWeek += "@Localizer["7 "]" + " ";
		if ((intDay & 64) === 64) dayOfWeek += "@Localizer["Su "]" + " ";
		if (intDay == 127)
			dayOfWeek = "@Localizer["All day"]"
		if (intDay == 0)
			dayOfWeek = "@Localizer["No day"]"
		return dayOfWeek;
	}
</script>