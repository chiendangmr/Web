@model HD.TVAD.Web.Features.Managers.UserGroup.Models.UserGroupViewModel

@{
    var canEditUserGroup = User.IsInRole(HD.TVAD.Web.StartData.UserPermissions.Manager_UserGroup_Edit.ToString());

    var canSetPermission = User.IsInRole(HD.TVAD.Web.StartData.UserPermissions.Manager_UserGroup_SetPermission.ToString());
}

<div style="position:absolute;top:2px;bottom:2px;left:2px;right:2px;">
    @(Html.DevExtreme().TreeList()
        .ID("treeUserGroup")
        .KeyExpr(nameof(Model.id))
        .ParentIdExpr(nameof(Model.parentId))
        .ShowBorders(true)
        .Selection(s => s.Mode(SelectionMode.Single))
        .RowAlternationEnabled(true)
        .HoverStateEnabled(true)
        .ColumnAutoWidth(true)
        .WordWrapEnabled(true)
        .Sorting(s => s.Mode(GridSortingMode.Single))
        .SearchPanel(s => { s.Visible(true); s.Placeholder(Localizer["Search..."].Value); })
        .HeaderFilter(f => f.Visible(true))
        .FilterRow(f =>
        {
            f.Visible(true);
            f.OperationDescriptions(des =>
            {
                des.Contains(Localizer["Contains"].Value);
                des.NotContains(Localizer["Does not contain"].Value);
                des.StartsWith(Localizer["Starts with"].Value);
                des.EndsWith(Localizer["Ends with"].Value);
                des.Equal(Localizer["Equals"].Value);
                des.NotEqual(Localizer["Does not equal"].Value);
            });
            f.ResetOperationText(Localizer["Reset"].Value);
        })
        .NoDataText(Localizer["No group"].Value)
        .Height("100%")
        .Editing(e =>
        {
            e.Mode(DevExtreme.AspNet.Mvc.GridEditMode.Row);

            e.AllowAdding(canEditUserGroup);
            e.AllowUpdating(canEditUserGroup);
            e.AllowDeleting(canEditUserGroup);
            e.Texts(texts =>
            {
                texts.AddRow(Localizer["New group"].Value);
                texts.AddRowToNode(Localizer["Add"].Value);
                texts.EditRow(Localizer["Edit"].Value);
                texts.CancelRowChanges(Localizer["Cancel"].Value);
                texts.DeleteRow(Localizer["Delete"].Value);
                texts.ConfirmDeleteTitle(Localizer["Delete user group"].Value);
                texts.ConfirmDeleteMessage(Localizer["Are you sure delete user group?<br/>Childrens group auto deletes!!!"].Value);
                texts.SaveAllChanges(Localizer["Save all changes"].Value);
                texts.SaveRowChanges(Localizer["Save"].Value);
                texts.UndeleteRow(Localizer["Undelete row"].Value);
                texts.ValidationCancelChanges(Localizer["Validation cancel changes"].Value);
                texts.CancelAllChanges(Localizer["Discard changes"].Value);
            });
        })
        .Columns(columns =>
        {
            columns.Add().DataField(nameof(Model.name)).Caption(Html.DisplayNameFor(m => m.name)).SortOrder(SortOrder.Asc);
        })
        .DataSource(ds => ds.WebApi().RouteName("managersApiRoute").Controller("UserGroupWebAPI").Key(nameof(Model.id)))
        .OnContentReady("userGroupContentReady")
        .OnCellPrepared("userGroupOnCellPrepared")
        .OnToolbarPreparing("userGroupOnToolbarPreparing")
        .OnSelectionChanged("userGroupOnSelectionChanged")
        )
</div>

<script type="text/javascript">
    function getTreeUserGroup() {
        return $("#treeUserGroup").dxTreeList("instance");
    }

    function userGroupContentReady(e) {
        var ui = e.component;
        ui.columnOption("command:edit", {
            visibleIndex: -1,
            width: 120
        });
    }

    function userGroupOnCellPrepared(e) {
        if (e.rowType === "data") {
            if (e.column.command === "edit") {
                var isEditing = e.row.isEditing,
                    $links = e.cellElement.find(".dx-link");

                $links.text("");
                $links.css('text-decoration', 'none').css('font-size', '18px').css('margin', '0 3px');

                if (isEditing) {
                    $links.filter(".dx-link-save").addClass("dx-icon-save");
                    $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
                } else {
                    $links.filter(".dx-link-add").addClass("dx-icon-add");
                    if (e.row.level > 0) {
                        $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                        $links.filter(".dx-link-delete").addClass("dx-icon-trash");
                    }
                    else {
                        $links.filter(".dx-link-edit").remove();
                        $links.filter(".dx-link-delete").remove();
                        $links.filter(".dx-link-add").css('float', 'left')
                        $links.filter(".dx-link-add").css('margin-left', '15px');
                    }
                }
            }
        }
        else if (e.rowType === "header") {
            $links = e.cellElement.filter(".dx-treelist-action");
            $links.css("text-align", "center");
        }
    }

    function userGroupOnToolbarPreparing(e) {
        var treeList = e.component;

        for (var i = 0; i < e.toolbarOptions.items.length; ++i) {
            var item = e.toolbarOptions.items[i];
            if (item.name == 'addRowButton') {
                e.toolbarOptions.items.splice(i, 1);
                break;
            }
        }

        e.toolbarOptions.items.unshift(
            {
                location: "before",
                widget: "dxButton",
                options: {
                    icon: "refresh",
                    hint: '@Localizer["Refresh"].Value',
                    onClick: function () {
                        treeList.refresh();
                    }
                }
            }
        );

        for (var i = 0; i < e.toolbarOptions.items.length; ++i) {
            var item = e.toolbarOptions.items[i];
            if (item.name == 'searchPanel') {
                var pn = e.toolbarOptions.items[i];
                e.toolbarOptions.items.splice(i, 1);
                pn.location = "before";
                e.toolbarOptions.items.splice(1, 0, pn)
                break;
            }
        }
    }

    function userGroupOnSelectionChanged(e) {
        var userGroup = null;
        if (e.selectedRowsData.length > 0)
            userGroup = e.selectedRowsData[0];

        var allowSetPermission = '@canSetPermission'.toLowerCase() == "true" ? true : false;

        if (allowSetPermission && userGroup.parentId) {
            getTreePermission().option("editing.allowUpdating", true);
            getButtonSavePermission().option("disabled", false);
        }
        else {
            getTreePermission().option("editing.allowUpdating", false);
            getButtonSavePermission().option("disabled", true);
        }

        getTreePermission().cancelEditData();
        getTreePermission().refresh();
    }
</script>