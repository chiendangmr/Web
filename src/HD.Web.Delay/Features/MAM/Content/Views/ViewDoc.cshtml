@inject HD.Station.MediaAssets.IMediaAssetService _mamService
@model PreviewAndApproveViewModel
@{
    var lstAsset = Model.AssetVMs;    
    var lstDocsUrl = new List<string>();
    var docTypeId = _settings.Value.AppSettings.AssetTypeDocsId;
    foreach(var asset in lstAsset)
    {
        lstDocsUrl.AddRange(await _mamService.LstDocsUrlAsync(asset.Id));
    }
}
@{
    Layout = null;
}

<div class="container-flex">
    <div class="flex flex-2">
        <div class="container-vertical-flex">
            <div class="flex flex-1">
                <div class="flex flex-1 text-center" id="showTextNotExist" style="margin-top:30%;height:100%;" hidden>
                </div>
                <div class="flex flex-1 text-center" id="showImg" style="height:100%;" hidden>
                    @*<img src="@Model.Path" />*@
                </div>
                <div class="flex flex-1" id="showPdf" style="height:100%;" hidden>
                    @*<object data="@Model.Path" type="application/pdf" style="width:100%; height:100%;"></object>*@
                </div>
            </div>            
        </div>
    </div>
    <div class="flex flex-1" id="grid" style="height:100%">

    </div>
</div>
@*@(Html.Kendo().ContextMenu()
    .Name("gridDocContextMenu")
    .Target("#grid")
    .Orientation(ContextMenuOrientation.Vertical)
    .Items(items =>
    {
        items.Add()
        .Text(Localizer["Set Active"].Value);

    })
    .Events(e => e.Select("selectContextMenu"))    
    .Deferred()
)*@
<script>
    var lstAssets =@Json.Serialize(lstAsset);
    var lstUrl = @Json.Serialize(lstDocsUrl);

    $.ajax({
        url: lstUrl[0],
        type: 'HEAD',
        error: function () {
            //file not exists
            $("#showTextNotExist").append("<p>File " + lstUrl[0] + " doesn't exist on Server!</p>");
            $("#showTextNotExist").show();
        },
        success: function () {
            //file exists
            //console.log(path);
            if (lstUrl[0].substr(lstUrl[0].length - 3) === "pdf") {
                $("#showPdf").append('<object data="' + lstUrl[0] + '" type="application/pdf" style="width:100%; height:100%;"></object>');
                $("#showPdf").show();
            } else {
                $("#showImg").append('<img src="' + lstUrl[0] + '" style="width:100%; height:100%;"/>');
                $("#showImg").show();
            }
        }
    });
                
    console.log(lstAssets);
    $("#grid").kendoGrid({
        dataSource: {
            type: "aspnetmvc-ajax",
            transport: {
                read: {
                    type: "GET",
                    url: '/MAM/Content/GetAllAssetForContent',
                    dataType: 'json',
                    data: { contentId: "@Model.ContentId", assetTypeId: "@docTypeId" }
                }
            },
            schema: {
                model: {
                    fields: {
                        Name: { type: "string" },
                        UploadedDate: { type: "date" },
                        IsActivated: { type: "bool" }
                    }
                }
            },
            pageSize: 20
        },
        //height: 750,
        scrollable: true,
        sortable: true,
        filterable: true,
        pageable: {
            input: true,
            numeric: false
        },
        columns: [
            { field: "Name", title: "@Localizer["Name"]"},
            { field: "UploadedDate", title: "@Localizer["Uploaded Date"]", format: "{0:yyyy-MM-dd}" },
            {
                field: "IsActivated", title: "@Localizer["Is Activated"]",
                template: '<input type="checkbox" #= IsActivated ? checked="checked" : "" # disabled="disabled" ></input>'
            }
        ]
    });
    var _assetId;
    @*@Html.Kendo().DeferredScriptsFor("gridDocContextMenu", false);

        function selectContextMenu(e) {
            switch ($(e.item).text()) {
                case "@Localizer["Set Active"]":
                    SetActive();
                    break;
            }
    }
        function SetActive() {
            var activeAsset = {
                ContentId: "@Model.ContentId",
                AssetTypeId: "@docTypeId",
                ActiveAssetId: _assetId
            };
            $.ajax({
                type: "POST",
                url: "/MAM/Content/SetAssetActive",
                data: { contentActiveAsset: activeAsset },
                async: true,
                success: function (msg) {
                    console.log(msg);
                    $('#grid').data('kendoGrid').dataSource.read();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ' ' + errorThrown + ' ' + XMLHttpRequest.responseText);
                }
            });
        }*@
    $("#grid").on("mousedown", "tr[role='row']", function (e) {
        if (e.which === 1) {
            $("#showTextNotExist").hide();
            $("#showPdf").hide();
            $("#showImg").hide();
            $("#showTextNotExist").empty();
            $("#showPdf").empty();
            $("#showImg").empty();
            $("#grid tbody tr").removeClass("k-state-selected");
            $(this).toggleClass("k-state-selected");
            var gridData = $("#grid").data('kendoGrid');

            var selectedRowData = gridData.dataItem($(event.target).closest("tr"));
            var id = selectedRowData.Id;
            console.log(selectedRowData);
            $.ajax({
                type: "POST",
                url: "/MAM/Content/GetLstDocsUrl",
                data: { assetId: id },
                async: true,
                success: function (msg) {
                    console.log(msg);
                    var path = msg[0];
                    $.ajax({
                        url: path,
                        type: 'HEAD',
                        error: function () {
                            //file not exists
                            $("#showTextNotExist").append("<p>File " + path + " doesn't exist on Server!</p>");
                            $("#showTextNotExist").show();
                        },
                        success: function () {
                            //file exists
                            //console.log(path);
                            if (path.substr(path.length - 3) === "pdf") {
                                $("#showPdf").append('<object data="' + path + '" type="application/pdf" style="width:100%; height:100%;"></object>');
                                $("#showPdf").show();
                            } else {
                                $("#showImg").append('<img src="' + path + '" style="width:100%; height:100%;"/>');
                                $("#showImg").show();
                            }
                        }
                    });
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ' ' + errorThrown + ' ' + XMLHttpRequest.responseText);
                }
            });
        } else if (e.which === 3) {
            $("#grid tbody tr").removeClass("k-state-selected");
            $(this).toggleClass("k-state-selected");
            var gridData = $("#grid").data('kendoGrid');

            var selectedRowData = gridData.dataItem($(event.target).closest("tr"));
            _assetId = selectedRowData.Id;
        }
    });
</script>
