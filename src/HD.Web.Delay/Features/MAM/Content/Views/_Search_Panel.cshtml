@{
	Layout = null;
}
@model ContentViewModel
@inject IProducerViewService _producerViewService
@inject IProductGroupViewService _productGroupViewService
@inject IContentTypeViewService _contentTypeViewService
@inject IRegisterViewService _registerViewService
@inject IContentViewService _contentViewService
@{
	var _producerSelectItems = await _producerViewService.GetSelectListItemAsync();
	var _productGroupSelectItems = await _productGroupViewService.GetSelectListItemAsync();
	var _assetSelectItems = await _contentTypeViewService.GetSelectListItemAsync();
	var assetCodeItems = await _contentViewService.GetNameListAsync();
	var productNames = await _contentViewService.GetProductNameListAsync();
	var _registerSelectItems = await _registerViewService.GetSelectListItemAsync();
}

<form id="search-form" class="form-horizontal">
	<div class="form-group">
		<div class="col-md-4 control-label">
			<label asp-for="Code"></label>
		</div>
		<div class="col-md-8">
			<input asp-for="Code" list="assetCodeItems" data-bind="{textInput: code, event: { keyup: onCodeKeyUp, blur: onAssetCodeBlur}}" class="form-control" />
			<datalist id="assetCodeItems">
				<select name="assetCodeItems" asp-items="assetCodeItems"></select>
			</datalist>
		</div>
	</div>
	<div class="form-group">
		<div class="col-md-4 control-label">
			<label asp-for="ProductName"></label>
		</div>
		<div class="col-md-8">
			<input asp-for="ProductName" list="productNames" data-bind="{textInput: producerName, event: { keyup: onProducerNameKeyUp}}" class="form-control" />
			<datalist id="productNames">
				<select name="productNames" asp-items="productNames"></select>
			</datalist>
		</div>
	</div>
	<div class="form-group">
		<div class="col-md-4 control-label">
			<label asp-for="ProductModel"></label>
		</div>
		<div class="col-md-8">
			<input asp-for="ProductModel" class="form-control" />
		</div>
	</div>
	<div class="form-group">
		<div class="col-md-4 control-label">
			<label asp-for="ProducerId"></label>
		</div>
		<div class="col-md-8">
			<select asp-for="ProducerId" data-bind="{value: producerId, event: { change: onProducerIdChange}}" class="form-control" asp-items="_producerSelectItems">
				<option value="">@Localizer["All producer"]</option>
			</select>
		</div>
	</div>
	<hr />
		<div class="text-center" style="margin-top: 10px">
			<div class="btn-group">
				<button id="submit-btn" data-bind="{event: { click: onSubmitBtnClick}}" type="button" class="btn btn-primary-outline"><span class="icon icon-search"></span> @Localizer["Search"] </button>
				<button id="clear-btn" data-bind="{event: { click: onClearBtnClick}}" type="reset" value="Reset" class="btn btn-primary-outline"><span class="icon icon-action-cancel"></span> @Localizer["Clear"] </button>

			</div>
		</div>
</form>

<script>
	require(['module/manager', 'knockout'], function (manager, ko) {

		var searchViewModel = {
			code: ko.observable(""),
			producerName: ko.observable(""),
			producerId: ko.observable(),
			onCodeKeyPress: function () {
			},
			onCodeKeyUp: function (d, e) {
				var _this = this;
				if (e.keyCode == 13) {
					this.search();
					return false; // ignore default event
				}
				return false;
			//	this.search();
			},
			onAssetCodeBlur: function () {
			//	this.search();
			},
			onProducerNameKeyUp: function () {
				this.search();
			},
			onProducerIdChange: function () {
				this.search();
			},
			onSubmitBtnClick: function () {
				this.search();
			},
			onClearBtnClick: function () {
				$("#search-form")[0].reset();
				var grid = $("#asset-grid").data("kendoGrid");
				var dataSource = grid.dataSource;
				dataSource.filter({});
				searchViewModel.code = ko.observable("");
				searchViewModel.producerName = ko.observable("");
			}
    		,
			search: function () {
				var _this = searchViewModel;
				var grid = $("#asset-grid").data("kendoGrid");
				var dataSource = grid.dataSource;
				var _filter = {};
				dataSource.filter({}); // clean
				var producerId = searchViewModel.producerId();
				if (producerId) {
					_filter = {
						logic: "and",
						filters: [
							{ field: "code", operator: "contains", value: searchViewModel.code() },
							{ field: "productName", operator: "contains", value: searchViewModel.producerName() },
							{ field: "producerId", operator: "eq", value: producerId }
						]
					};
				}
				else {
					_filter = {
						logic: "and",
						filters: [
							{ field: "code", operator: "contains", value: searchViewModel.code() },
							{ field: "productName", operator: "contains", value: searchViewModel.producerName() },
						]
					};
				}
				dataSource.filter(_filter);
			}
		};
		ko.applyBindings(searchViewModel, $("#search-form")[0]);
	});
</script>



