@using HD.TVAD.ApplicationCore.Entities.Booking

@model SpotBookingCreateIndexViewModel
@{
	Layout = null;
}
@inject ITimeBandViewService _timeBandViewService
@inject ITimeBandSliceForTypeService _timeBandSliceForTypeService
@{
	var timeBandSelectItems = new List<SelectListItem>();

	switch (Model.BookingType)
	{
		case BookingTypeEnum.Retail:
			var timeBands = await _timeBandSliceForTypeService.GetTimeBandsForTypeAsync(BookingTypeEnum.Retail);
			timeBandSelectItems = timeBands.Select(t => new SelectListItem() {
				Value = t.Id.ToString(),
				Text = t.TimeBandBase.Name,
			})
			.OrderBy(t => t.Text)
			.ToList();
			break;
		default:
			timeBandSelectItems = (await _timeBandViewService.GetSelectListItemAsync()).ToList();
			break;
	}

}
<div class="panel panel-flex panel-default">
	<div class="panel-heading">
		<div class="hr-divider">
			<ul class="nav nav-pills hr-divider-content hr-divider-nav" role="tablist">
				<li class="active"><a data-toggle="tab" href="#create-booking">@Localizer["Create booking"]</a></li>
				<li><a data-toggle="tab" href="#search-panel">@Localizer["Searching"]</a></li>
			</ul>
		</div>
	</div>

	<div class="panel-body">
		<div class="tab-content container-vertical-flex">
			<div id="create-booking" class="tab-pane in active fade flex">

				<form id="add-spotBooking-form" asp-area="Manager" asp-controller="SpotBooking" asp-action="Create" method="post" enctype="multipart/form-data" class="form-horizontal">

					<input type="hidden" asp-for="AnnexContractAssetId" />
					<div class="form-group">
						<div class="col-md-4 control-label">
							<label asp-for="AssetCode"></label>
						</div>
						<div class="col-md-8">
							<input asp-for="AssetCode" class="form-control" disabled type="text" />
							<span asp-validation-for="AssetCode" class="text-danger"></span>
						</div>
					</div>
					<div class="form-group">
						<div class="col-md-4 control-label">
							<label asp-for="BroadcastDate"></label>
						</div>
						<div class="col-md-8">
							<input asp-for="BroadcastDate" class="form-control" type="date" data-bind="value: broadcastDate, event: {change: onBroadcastDateChange}" />
							<span asp-validation-for="BroadcastDate" class="text-danger"></span>
						</div>
					</div>
					<div class="form-group">
						<div class="col-md-4 control-label">
							<label asp-for="TimeBandId"></label>
						</div>
						<div class="col-md-8">
							<select asp-for="TimeBandId" class="form-control" data-bind="value: timeBandId,event: {change: onTimeBandSelectChange}" asp-items="timeBandSelectItems">
								<option value="">Choose...</option>
							</select>
						</div>
					</div>
					<div class="form-group">
						<div class="col-md-4 control-label">
							<label asp-for="TimeBandSliceId"></label>
						</div>
						<div class="col-md-8">
							<select class="form-control" asp-for="TimeBandSliceId" data-bind="enable: enableTimeBandSliceSelect, value: timeBandSliceId,
									event: {change: onTimeBandSliceSelectChange} ,
									options: timebandSliceOptions,
								optionsText: 'name',
								optionsValue: 'id',
								optionsCaption: 'Choose...'"></select>
							<span asp-validation-for="TimeBandSliceId" class="text-danger"></span>
						</div>
					</div>
					<div class="form-group">
						<div class="col-md-4 control-label">
							<div class="checkbox-inline custom-checkbox custom-control">
								<label>
									<input type="checkbox" data-bind="checked: isPositionCost, event: {change: onIsPositionCostChange}" asp-for="IsPositionCost" />
									<span class="custom-control-indicator"></span>
									<span class="control-label">@Localizer["Position"]</span> 
								</label>
							</div>
						</div>
						<div class="col-md-8">
							<input class="form-control" data-bind="enable: enablePositionInput, value: position" type="number" asp-for="Position" />
						</div>

					</div>
					<h3 class="text-center text-danger"> @ViewBag.Message</h3>
					<div class="form-group">
						<div class="col-md-12 text-center">
							<button id="submit" type="submit" value="" class="btn btn-primary-outline" onclick=""><span class="icon icon-plus"></span> @Localizer["Add"] </button>
							<button id="btn-clear" type="button" data-bind="click: onClearBtnClick" class="btn btn-default-outline"> <span class="icon icon-action-delete"></span> @Localizer["Reset"] </button>
						</div>
					</div>
					<hr />
					<div class="pull-right">
						Max duration: <span id="ko-max-duration" class="text-danger" data-bind="text: maxDuration"></span> -- Used: <span class="text-info" data-bind="text: usedDuration"></span>

						<div id="ko-duration-by-type" data-bind="template: { name:  'durationByType-template', foreach: durationByTypes } "></div>
						<p></p>
					</div>
					<div class="text-center">
						<button id="duration-refresh" data-bind="click: onRefreshDurationBtnClick" type="button" class="btn btn-sm btn-default-outline"><span class="icon icon-adjust"></span>Refresh</button>
					</div>
				</form>
			</div>


			<div id="search-panel" class="tab-pane fade flex">
				@Html.Partial("_SearchBookingPartial", new SpotBookingSearchIndexViewModel()
		   {
			   FromDate = DateTime.Today,
			   ToDate = DateTime.Today,
		   })
			</div>
		</div>
	</div>
</div>

<script>
	require(['module/manager'], function (manager) {
		console.log(manager);
		var newManager = jQuery.extend(true, {}, manager);
		console.log(newManager);
		newManager.common.submitForm.init({
			formId: 'add-spotBooking-form',
			responseCallback: function (response) {
				console.log(response);
				if (typeof response == 'object') {
					if (response.result == "OK") {
						$("#modal").modal("hide");
						notification.show(response.message);
						setTimeout(function () {
							if ($("#grid-spotBooking").data('kendoGrid')) {
								$("#grid-spotBooking").data('kendoGrid').dataSource.read();
							}
						}, 300);
						$("#duration-refresh").click();
					}
					else {
						alert(response.message);
					}
				}
				else {
					alert(response);
				}
			}
		});
	});
	require(['jquery', 'knockout'], function ($, ko) {

		var timebandSliceOption = function (id, name) {
			this.name = name;
			this.id = id;
		};
		var addBookingViewModel = {
			isPositionCost: ko.observable(false),
			enablePositionInput: ko.observable(false),
			broadcastDate: ko.observable($("#BroadcastDate").val()),
			position: ko.observable(),
			timeBandId: ko.observable(),
			timeBandSliceId: ko.observable(),
			enableTimeBandSliceSelect: ko.observable(false),
			maxDuration: ko.observable(),
			usedDuration: ko.observable(),
			durationByTypes: ko.observable(),
			timebandSliceOptions: ko.observableArray(),
			onClearBtnClick: function(){
				var _this = this;
				_this.timeBandSliceId("");
				_this.timeBandId("");
				_this.isPositionCost(false);
				_this.position("");
				_this.enablePositionInput(false);

			},
			onIsPositionCostChange: function (data, event) {
				var _this = this;
				console.log(event);
				var checked = event.target.checked;
				_this.enablePositionInput(checked);
				_this.position("");
			},
			onTimeBandSliceSelectChange: function () {
				var _this = this;
				$("#ko-duration-by-type").empty();
				if (_this.timeBandSliceId() != "") {
					_this.GetInfoDuration();
				}
			},
			onBroadcastDateChange: function () {
				var _this = this;
				$("#ko-duration-by-type").empty();
				if (_this.broadcastDate() && _this.timeBandSliceId()) {
					_this.GetInfoDuration();
				};
			},
			onTimeBandSelectChange: function (data, event) {
				var _this = this;
				if (_this.timeBandId()) {
					_this.enableTimeBandSliceSelect(true);
					_this.timebandSliceOptions([]);
					$.ajax({
						url: "Manager/TimeBand/GetAllTimeBandSliceByTimeBandId",
						type: 'GET',
						data: {
							timeBandId: _this.timeBandId(),
							bookingType: "@((int)Model.BookingType)"
						},
						success: function (response) {
							console.log(response);
							var data = response.Data;
							$.each(data, function (i, v) {
								_this.timebandSliceOptions.push(
									new timebandSliceOption(v.Id, v.Name));
							});


						}
					});

				}
				else {
					_this.enableTimeBandSliceSelect(false);
					_this.timebandSliceOptions([]);
				}
			},
			onRefreshDurationBtnClick: function () {
				var _this = this;
				if (_this.timeBandSliceId()) {
					_this.GetInfoDuration();
				}
			},

			GetMaxDuration: function () {
				var _this = this;
				if (_this.timeBandSliceId())
				{
					$.ajax({
						url: "Manager/TimeBandSlice/GetMaxDuration",
						type: 'GET',
						data: {
							timeBandSliceId: _this.timeBandSliceId(),
							broadcastDate: _this.broadcastDate(),
						},
						success: function (response) {
							console.log(response);
							var data = response;

							_this.AppendMaxDuration(data);
						}
					});
				}
			},
			GetUsedDuration: function () {
				var _this = this;
				if (_this.timeBandSliceId() && _this.broadcastDate()) {

					$.ajax({
						url: "Booking/Spot/GetUsedDuration",
						type: 'GET',
						data: { timeBandSliceId: _this.timeBandSliceId(), broadcastDate: _this.broadcastDate() },
						success: function (response) {
							console.log(response);
							var data = response;
							_this.usedDuration(data);

						}
					});
				}
			},
			AppendMaxDuration: function (timeBandSlice) {
				var _this = this;
				var maxDuration = 0;
				if (timeBandSlice.MaxDuration)
					maxDuration = timeBandSlice.MaxDuration;
				_this.maxDuration(maxDuration);
				var durationByTypes = [];

				$.each(timeBandSlice.TimeBandSliceDurationByTypes, function (i, t) {

					durationByTypes.push({ bookingTypeName: t.BookingTypeName, maxDuration: t.Duration, bookingTypeId: t.BookingTypeId });

					_this.getUsedDurationByType({
						broadcastDate: _this.broadcastDate(),
						timeBandSliceId: _this.timeBandSliceId(),
						bookingTypeId: t.bookingTypeId,
					});
					_this.durationByTypes(durationByTypes);
				});
			},
			getUsedDurationByType: function (data) {
				$.ajax({
					url: "Booking/Spot/GetUsedDurationByType",
					type: 'GET',
					data: data,
					success: function (response) {
						console.log("used duration by type ", response);
						var _data = response;
						$("span[data-bookingtypeid=" + data.bookingTypeId + "]").html(_data);
					}
				});
			}
			,
			GetInfoDuration: function () {
				var _this = this;
				_this.GetMaxDuration();
				_this.GetUsedDuration();
			},
		};
		ko.applyBindings(addBookingViewModel, $("#create-booking")[0]);

	});
</script>