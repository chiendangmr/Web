@{
	Layout = null;
}
@model SetGroupIndexViewModel
@{
	var theme = ViewBag.Theme ?? "toolkit-inverse";
	var backgroundColor = "#fff";
	if (theme == "toolkit-inverse")
	{
		backgroundColor = "#252830";
	}
}
<style>
	.modal-content > .panel > .panel-body {
		height: 500px;
		background: @backgroundColor
	}
</style><div class="panel panel-default panel-flex">
	<div class="panel-heading">
		<h4> @Localizer["Set group for"] @Model.UserName</h4>
	</div>
	<div class="panel-body">
		<div id="tree-view-permission"></div>
	</div>
	<div class="panel-footer text-right">
		<button id="save" class="btn btn-primary-outline">
			<span class="icon icon-action-save"></span> @Localizer["Save"]
		</button>
		<button type="button" class="btn btn-default-outline" data-dismiss="modal"><span class="icon icon-back"></span> @Localizer["Back"]</button>
	</div>
</div>
<script id="group-check-template" type="text/x-kendo-template">
	#if(checked){#
	<div class="checkbox-inline custom-control custom-checkbox">
		<label>
			<input type="checkbox" checked name="group" value="#= id#" />
			<span class="custom-control-indicator"></span>
		</label>
	</div>
	#}else{#
	<div class="checkbox-inline custom-control custom-checkbox">
		<label>
			<input type="checkbox" name="group" value="#= id#" />
			<span class="custom-control-indicator"></span>
		</label>
	</div>
	#}#
	<span>#=groupName#</span>
</script>
<script>
	$("#tree-view-permission").kendoTreeList({
		dataSource: {
			transport: {
				read: {
					url: "Manager/User/GetGroupsOfUser",
					dataType: "JSON",
					type: "GET",
					data: { UserId: "@Model.UserId" }
				}
			},
			schema: {
				model: {
					id: "id",
					fields: {
					},
				},
				data: "Data",
				total: "Total"
			},
		},
		columns: [
				{
					field: "HasPermission",
					title: "@Localizer["Check"]",
					template: function (dataItem) {
						return kendo.template($("#group-check-template").html())({ checked: dataItem.check, id: dataItem.id, groupName: dataItem.name });
					}

				},
		//	{ field: "name", title: "@Localizer["Group"]" },
		],
		selectable: "single",
		dataBound: function () {
			//	getAllGroupOfUser();

			bindSaveButtonEvent();
			var treeList = this;
			var rows = $("tr.k-treelist-group", treeList.tbody);
			$.each(rows, function (idx, row) {
				treeList.expand(row);
			});
		},
		//	change: onChange,

	});

	@*(function getAllGroup() {
		$.ajax({
			url: "Manager/UserGroup/GetAllGroupOfCurentUserCanSet",
			type: 'GET',
			data: { UserId : "@Model.UserId"}

		}).done(function (response) {
			console.log(response);
			AppendSelectGroup(response);

		 });
	})();*@
	function AppendSelectGroup(groups) {
		var $content = "";
		$.each(groups, function (i, v) {
			$content += '<option value="' + v.id + '">' + v.UserGroupName + ' </option>'
		});
		$("#groups").append($content);

	}

	function getAllGroupOfUser() {
		$.ajax({
			url: "Manager/User/GetAllGroupOfUser",
			type: 'GET',
			data: { UserId: "@Model.UserId" }

		}).done(function (response) {
			console.log(response);
			ActiveGroup(response);
			ActiveCheckBoxGroup(response);

		});
	};
	function ActiveCheckBoxGroup(groups) {
		$("input[type='checkbox']").each(function (i, v) {
			for (j = 0; j < groups.length; j++) {
				if (v.value == groups[j].id)
					$(v).prop('checked', true);
			};
		});
	}

	function ActiveGroup(groups) {
		var options = $("#groups option");
		for (i = 0; i < options.length; i++) {
			for (j = 0; j < groups.length; j++) {
				if (options[i].value == groups[j].id) {
					//debugger;
					$(options[i]).prop('selected', true);
				}
			}
		}
		bindSaveButtonEvent();
	}
	function bindSaveButtonEvent() {
		$("#save").on('click', function () {
			console.log('save click');
			//	var groups = $("#groups").val();

			var checkboxs = $("input[type='checkbox']:checked");
			var groups = [];
			$.each(checkboxs, function (i, v) {
				groups.push(v.value);
			});
			SetGroup("@Model.UserId", groups);
		});;
	};
	function SetGroup(userId, groupIds) {
		console.log(groupIds);
		//	debugger;
		$.ajax({
			url: "Manager/User/SetGroup",
			data: { userId: userId, groupIds: groupIds },
			type: "POST",
		}).done(function (response) {
			console.log(response);
			if (typeof response == 'object') {
				if (response.result == "OK") {
					$("#modal").modal("hide");
					notification.show(response.message);
				}
				else {
					alert(response.message);
				}
			}
			else {
				alert(response);
			}
		});
	}
</script>