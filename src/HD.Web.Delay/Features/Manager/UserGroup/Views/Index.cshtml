@{
	ViewBag.Title = Localizer["User Group Manager"].Value;
	Layout = "_UserAndGroup_Layout";
}
@functions{
	async Task<bool> CheckPermissionAsync(UserPermissions permission)
	{
		return await AuthorizationService.AuthorizeAsync(User, null, new PermissionRequirement(permission));
	}
}
@{
	var canCreate = await CheckPermissionAsync(UserPermissions.Manager_UserGroup_Create);
	var canEdit = await CheckPermissionAsync(UserPermissions.Manager_UserGroup_Edit);
	var canDelete = await CheckPermissionAsync(UserPermissions.Manager_UserGroup_Delete);
	var canSetPermission = await CheckPermissionAsync(UserPermissions.Manager_UserGroup_SetPermission);
}
@{
	var notHavePessmission = Localizer["Not have permission"].Value;
	var disabledClass = "disabled";
	var normalClass = "";
	var normalLabel = "";
	var IsCreatedClass = canCreate ? normalClass : disabledClass;
	var labelBtnCreate = canCreate ? normalLabel : notHavePessmission;
	var IsEditedClass = canEdit ? normalClass : disabledClass;
	var labelBtnEdit = canEdit ? normalLabel : notHavePessmission;
	var IsDeletedClass = canDelete ? normalClass : disabledClass;
	var labelBtnDelete = canDelete ? normalLabel : notHavePessmission;
	var IsSetPermissionClass = canSetPermission ? normalClass : disabledClass;
	var labelBtnSetPermission = canSetPermission ? normalLabel : notHavePessmission;
}

@inject IUserGroupViewService _userGroupViewService
@{
//	var userGroups = await _userGroupViewService.GetNameListAsync();
}
<div class="panel panel-flex panel-default">
    <div class="panel-heading">
        <div class="dashhead">
            <div class="dashhead-titles">
                <div class="dashhead-title">
                    <h2> @ViewBag.Title </h2>
                </div>
            </div>
            <div class="dashhead-toolbar btn-toolbar">
                @*<button href="~/Manager/UserGroup/Create" id="" class="btn btn-primary-outline btn-add @IsCreatedClass" title="@labelBtnCreate"> <span class="icon icon-plus"></span> @Localizer["Add group"] </button>*@
            </div>
        </div>
		<div class="flextable table-actions">
			<div class="flextable-item flextable-primary">
				<div class="btn-toolbar-item input-with-icon" style="width: 70%; max-width: 600px;">
					<span class="icon icon-search"></span>
					<input type="search" id="filterText" data-bind="value: filterText, event: {keyup: onFilterTextKeyUp,blur: onFilterTextBlur}" list="items" class="form-control input-block" placeholder="@Localizer["Search..."]">
					<datalist id="items">
					</datalist>
				</div>
				<div class="btn-toolbar-item input-with-icon">
					<button id="clearFilter" data-bind="click: onClearFilterClick" class="btn btn-primary-outline"><span class="icon icon-erase"></span></button>
				</div>
			</div>
			<div class="flextable-item">
				<div class="checkbox custom-control custom-checkbox">
					<label>
						<input id="filterDisabled" type="checkbox" class="form-control">
						<span class="custom-control-indicator"></span>
						@Localizer["Include Disabled"]
					</label>
				</div>
			</div>
		</div>
	</div>
    <div class="panel-body">
		<div id="tree-list"></div>
    </div>
</div>
<div id="modal" class="modal fade" tabindex="-1" role="dialog">
	<div class="modal-dialog" role="document">
		<div class="modal-content">

		</div>
	</div>
</div>


<script id="edit-template" type="text/x-kendo-template">
	<div class="btn-group">
		<button data-id="#: id #" class="btn btn-danger-outline btn-sm delete user-group @IsDeletedClass" title="@labelBtnDelete"> @Localizer["Delete"]</button>
		<button data-id="#: id #" class="btn btn-warning-outline btn-sm edit user-group @IsEditedClass" title="@labelBtnEdit"> @Localizer["Edit"]</button>
		<button data-id="#: id #" class="btn btn-info btn-sm create-group @IsCreatedClass" title="@labelBtnCreate"> @Localizer["Add group"]</button>
		<button data-id="#: id #" class="btn btn-success btn-sm set-permission @IsSetPermissionClass" title="@labelBtnSetPermission"> @Localizer["Set permisson"]</button>
	</div>
</script>

<script id="checkbox-template" type="text/x-kendo-template">
	<div class="checkbox-inline custom-control custom-checkbox">
		<label>
			<input #=checked# type="checkbox" disabled />
			<span class="custom-control-indicator"></span>
		</label>
	</div>
</script>

<script>
	require(["module/manager"], function () {

		$("#tree-list").kendoTreeList({
			dataSource: {
				transport: {
					read: {
						url: "Manager/UserGroup/GetAllUserGroup",
						dataType: "JSON",
						type: "GET"
					}
				},
				schema: {
					model: {
						id: "id",
						parentId: 'parentId',
						fields: {
							parentId: { field: "parentId", nullable: true },
							name: { field: "name", type: 'text' },
						},
					},
					data: "Data",
					total: "Total"
				},
				serverPaging: true,
				serverFiltering: true,
				type: "aspnetmvc-ajax",
			},
			columns: [
				{ field: "name", title: "@Localizer["Name"]" },
			//	{ field: "description", title: "@Localizer["Description"]" },
				{ field: "active", title: "@Localizer["Active"]",
				template: function (dataItem) {
					var checked = dataItem.active ? "checked" : "";
					return kendo.template($("#checkbox-template").html())({checked : checked});
					},
				},
				{
					field: "",
					title: "@Localizer["Edit"]",
					template: kendo.template($("#edit-template").html()),
					width: "280px",
				}
			],
			selectable: "single",
			dataBound: onGirdBound,
			change: onGirdChange,
			settings: {
				selectFirstRow: true,
				dataItemId: '',
			},

		});

		$("#btn-add").bind("click", function () {
			$("#modal .modal-content").load("Manager/Asset/Create", function () {

				$("#modal").modal("show");
			});
		});


		function onGirdBound() {

			var treeList = this;
			var rows = $("tr.k-treelist-group", treeList.tbody);
			//$.each(rows, function (idx, row) {
			//	treeList.expand(row);
			//});
			if (rows.length > 0)
				treeList.expand(rows[0]);

			var tree = this;
			var dataItems = tree.dataSource.data();
			console.log("dataItems: ", dataItems);

			if (tree.options.settings.dataItemId != '') {
				for (i = 0; i < dataItems.length; i++) {
					var dataItem = dataItems[i];
					if (dataItem.id == tree.options.settings.dataItemId) {
						tree.select($("tr[data-uid='" + dataItem.uid + "']"));
						break;
					}
				}
			}
			else
				if (tree.dataSource.at(0) && tree.options.settings.selectFirstRow || dataItems.length == 1) {
					var uid = tree.dataSource.at(0).uid;
					tree.select($("tr[data-uid='" + uid + "']"));
				}

			tree.options.settings.dataItemId = ''; // reset

			$("button.edit.user-group").bind("click", function () {
				if ($(this).hasClass("disabled")) {
					return false;
				}
				$("#modal .modal-content").load("Manager/UserGroup/Edit/" + this.dataset.id, function () {

					$("#modal").modal("show");
				});
			});
			$("button.delete.user-group").bind("click", function () {
				if ($(this).hasClass("disabled")) {
					return false;
				}
				$("#modal .modal-content").load("Manager/UserGroup/Delete/" + this.dataset.id, function () {

					$("#modal").modal("show");
				});
			});
			$("button.create-group").bind("click", function () {
				if ($(this).hasClass("disabled")) {
					return false;
				}
				$("#modal .modal-content").load("Manager/UserGroup/Create/" + this.dataset.id, function () {

					$("#modal").modal("show");
				});
			});
			$("button.set-permission").off().on("click", function () {
				if ($(this).hasClass("disabled")) {
					return false;
				}
				$("#modal .modal-content").load("Manager/UserGroup/LoadPermission/" + this.dataset.id, function () {

					$("#modal").modal("show");
				});
			});


		};

		function onGirdChange(arg) {
			var grid = arg.sender;
			var selected = grid.dataItem(this.select());
		//	$("#permission").load("Manager/UserGroup" + "/LoadPermission/" + selected.id);
		};
	});
	require(['jquery'], function () {
		$("#filterDisabled").off().on('change', function () {
			var tree = $("#tree-list").data("kendoTreeList");
			var dataSource = tree.dataSource;
			var data = { includeDisabled: this.checked };
			dataSource.transport.options.read.data = data;
			dataSource.read();
		});
	});
	require(['module/search'], function (search) {
		search.init({
			filter: function (filterText) {
				var grid = $("#tree-list").data("kendoTreeList");
				var dataSource = grid.dataSource;
				dataSource.filter({
					logic: "or",
					filters: [
					{ field: "name", operator: "contains", value: filterText }
					]
				});
			}
		});
	});


</script>
<style>
    .k-grid td {        
        overflow: unset;
    }
</style>