@model HD.TVAD.Web.Features.Tools.Menu.Models.MenuViewModel

@{
    ViewData["Title"] = Localizer["Menu manager"].Value;
}

<div style="position:absolute;top:5px;bottom:5px;left:5px;right:5px;">
    <div id="treeMenu"></div>
    <div id="context-menu"></div>
    <div id="popup"></div>
</div>

<script>
    var treeView;
    var syncTreeViewSelection = function (treeView, value) {
        if (!value) {
            treeView.unselectAll();
        } else {
            treeView.selectItem(value);
        }
    };

    var dxData;
    require(["jquery"], function ($) {
        require(["devextreme-aspnet-data/js/dx.aspnet.data"], function (dData) {
            require(["devextreme/js/aspnet/dx.aspnet.mvc"], function () {
                dxData = dData;

                $("#treeMenu").dxTreeList({
                    "dataSource": {
                        "store": dxData.createStore({
                            "key": "id",
                            "loadUrl": "/api/tools/MenuWebApi/Get",
                            "insertUrl": "/api/tools/MenuWebApi/Post",
                            "updateUrl": "/api/tools/MenuWebApi/Put",
                            "deleteUrl": "/api/tools/MenuWebApi/Delete"
                        })
                    },
                    "keyExpr": "id",
                    "parentIdExpr": "parentId",
                    "showBorders": true,
                    "columnAutoWidth": false,
                    "allowColumnResizing": true,
                    "allowColumnReordering": true,
                    "columnResizingMode": "widget",
                    "columnChooser": { "enabled": true },
                    "filterRow": { "visible": true },
                    "headerFilter": { "visible": true },
                    "selection": { "mode": "single" },
                    "rowAlternationEnabled": true,
                    "searchPanel": { "visible": true },
                    "hoverStateEnabled": true,
                    "sorting": { "mode": "multiple" },
                    "height": "100%",
                    "editing": {
                        "mode": "form",
                        "allowUpdating": true,
                        "allowAdding": true,
                        "allowDeleting": true
                    },
                    "columns": [
                        {
                            "dataField": "parentId",
                            "caption": "@Html.Raw(Html.DisplayNameFor(m => m.parentId))",
                            "visible": false,
                            "editCellTemplate": function (cellElement, cellInfo) {
                                var div = document.createElement("div");
                                cellElement.get(0).appendChild(div);
                                $(div).dxDropDownBox({
                                    "valueExpr": "id",
                                    "displayExpr": "name",
                                    "showClearButton": true,
                                    "dropDownOptions": { height: 350 },
                                    "dataSource": {
                                        "store": dxData.createStore({
                                            "key": "id",
                                            "loadUrl": "/api/tools/MenuWebApi/GetParentCanSet",
                                            "loadParams": { menuId: editMenuId }
                                        })
                                    },
                                    "value": cellInfo.data.parentId,
                                    "onValueChanged": function (e) {
                                        cellInfo.setValue(e.value);
                                    },
                                    "contentTemplate": function (e) {
                                        var value = e.component.option("value");
                                        $treeView = $("<div />").dxTreeView({
                                            dataSource: e.component.option("dataSource"),
                                            dataStructure: "plain",
                                            keyExpr: "id",
                                            parentIdExpr: "parentId",
                                            rootValue: null,
                                            virtualModeEnabled: true,
                                            selectionMode: "single",
                                            displayExpr: "name",
                                            expandAllEnabled: false,
                                            expandedExpr: "expanded",
                                            expandNodesRecursive: true,
                                            hoverStateEnabled: true,
                                            selectByClick: true,
                                            onContentReady: function (args) {
                                                if (value)
                                                    syncTreeViewSelection(args.component, value);
                                            },
                                            selectNodesRecursive: false,
                                            onItemSelectionChanged: function (args) {
                                                var value = args.component.getSelectedNodesKeys();
                                                e.component.option("value", value ? value[0] : null);
                                                e.component.close();
                                            }
                                        });

                                        treeView = $treeView.dxTreeView("instance");

                                        e.component.on("valueChanged", function (args) {
                                            syncTreeViewSelection(treeView, args.value);
                                        });

                                        return $treeView;
                                    }
                                });
                            }
                        },
                        {
                            "dataField": "name",
                            "caption": "@Html.Raw(Html.DisplayNameFor(m => m.name))"
                        },
                        {
                            "dataField": "icon",
                            "caption": "@Html.Raw(Html.DisplayNameFor(m => m.icon))"
                        },
                        {
                            "dataField": "groupIndex",
                            "caption": "@Html.Raw(Html.DisplayNameFor(m => m.groupIndex))",
                            "sortOrder": "asc",
                            "sortIndex": 0
                        },
                        {
                            "dataField": "index",
                            "caption": "@Html.Raw(Html.DisplayNameFor(m => m.index))",
                            "sortOrder": "asc",
                            "sortIndex": 1
                        },
                        {
                            "dataField": "url",
                            "caption": "@Html.Raw(Html.DisplayNameFor(m => m.url))"
                        },
                        {
                            "dataField": "controlerName",
                            "caption": "@Html.Raw(Html.DisplayNameFor(m => m.controlerName))"
                        },
                        {
                            "dataField": "actionName",
                            "caption": "@Html.Raw(Html.DisplayNameFor(m => m.actionName))"
                        },
                        {
                            "dataField": "areaName",
                            "caption": "@Html.Raw(Html.DisplayNameFor(m => m.areaName))"
                        }],
                    "onContentReady": menuContentReady,
                    "onCellPrepared": menuOnCellPrepared,
                    "onInitNewRow": menuOnNewRow,
                    "onEditingStart": menuOnEditStart,
                    "onCellHoverChanged": menuOnCellHoverChanged
                });

                $("#context-menu").dxContextMenu({
                    width: 200,
                    target: "#treeMenu",
                    items: [{
                        text: '@Html.Raw(Localizer["Set permission..."].Value)',
                        tag: 'SetPermission'
                    }],
                    onItemClick: onContextMenuItemClick
                });

                $("#popup").dxPopup({
                    showTitle: true,
                    showCloseButton: true,
                    visible: false,
                    width: 700,
                    height: 380,
                    contentTemplate: popupPermissionContent,
                    toolbarItems: [{
                        widget: "dxButton",
                        location: "after",
                        toolbar: "bottom",
                        options: {
                            type: "success",
                            text: "@Html.Raw(Localizer["Save"].Value)",
                            onClick: onSavePermission
                        }
                    },
                    {
                        widget: "dxButton",
                        location: "after",
                        toolbar: "bottom",
                        options: {
                            type: "default",
                            text: "@Html.Raw(Localizer["Cancel"].Value)",
                            onClick: function () {
                                $("#popup").dxPopup("instance").hide();
                            }
                        }
                    }]
                });
            });
        });
    });

    function menuContentReady(e) {
        var ui = e.component;
        ui.columnOption("command:edit", {
            visibleIndex: -1,
            width: 120
        });
    }

    function menuOnCellPrepared(e) {
        if (e.rowType === "data") {
            if (e.column.command === "edit") {
                var isEditing = e.row.isEditing,
                    $links = e.cellElement.find(".dx-link");

                $links.text("");
                $links.css('text-decoration', 'none').css('font-size', '18px').css('margin', '0 3px');

                if (isEditing) {
                    $links.filter(".dx-link-save").addClass("dx-icon-save");
                    $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
                } else {
                    $links.filter(".dx-link-add").addClass("dx-icon-add");
                    $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                    $links.filter(".dx-link-delete").addClass("dx-icon-trash");
                }
            }
        }
        else if (e.rowType === "header") {
            e.cellElement.css("text-align", "center");
        }
    }

    function menuOnNewRow(e) {
        editMenuId = null;
        if (e.data.parentId == 0)
            e.data.parentId = null;
    }

    var editMenuId = null;
    function menuOnEditStart(e) {
        editMenuId = e.data.id;
    }

    var currentMenu = null;
    function menuOnCellHoverChanged(e) {
        if (e.data) {
            currentMenu = e.data;
        }
        else
            currentMenu = null;
    }

    function onContextMenuItemClick(e) {
        if (currentMenu) {
            $("#popup").dxPopup("instance").option("title", '@Localizer["Set required permissions of menu "]' + ' ' + currentMenu.name);
            $("#popup").dxPopup("instance").show();
            currentMenuPermissions = null;
            $("#gridCurrentMenuPermission").dxDataGrid("instance").refresh();
        }
    }

    function popupPermissionContent() {
        var contents = $("<div />");
        contents.append($("<div class='lable'>@Localizer["Permission:"]</div>"));
        contents.append($("<div id='cbPermission'/>").dxDropDownBox({
            valueExpr: "id",
            displayExpr: "displayName",
            dropDownOptions: { height: 350 },
            dataSource: {
                store: dxData.createStore({
                    "key": "id",
                    "loadUrl": "/api/tools/MenuWebApi/GetAllUsePermissions"
                })
            },
            contentTemplate: function (e) {
                var value = e.component.option("value");
                $treeView = $("<div />").dxTreeView({
                    dataSource: e.component.option("dataSource"),
                    dataStructure: "plain",
                    keyExpr: "id",
                    parentIdExpr: "parentId",
                    rootValue: null,
                    virtualModeEnabled: true,
                    selectionMode: "single",
                    displayExpr: "displayName",
                    expandAllEnabled: true,
                    expandedExpr: "expanded",
                    expandNodesRecursive: true,
                    hoverStateEnabled: true,
                    selectByClick: true,
                    selectNodesRecursive: false,
                    onItemSelectionChanged: function (args) {
                        var value = args.component.getSelectedNodesKeys();
                        e.component.option("value", value ? value[0] : null);
                        e.component.close();
                    }
                });

                treeView = $treeView.dxTreeView("instance");

                e.component.on("valueChanged", function (args) {
                    syncTreeViewSelection(treeView, args.value);
                });

                return $treeView;
            }
        }));
        contents.append($("<div style='margin: 2px' />").dxButton({
            text: '@Localizer["Add permission"]',
            onClick: onAddPermission
        }));
        contents.append($("<div style='margin: 2px' />").dxButton({
            text: '@Localizer["Remove permissions"]',
            onClick: onRemovePermission
        }));

        contents.append($("<div id='gridCurrentMenuPermission'/>").dxDataGrid({
            dataSource: getCurrentMenuPermissions,
            showBorders: true,
            columnAutoWidth: true,
            selection: { mode: "multiple" },
            rowAlternationEnabled: true,
            hoverStateEnabled: true,
            height: "150px",
            columns: [{
                dataField: "permissionDisplayName",
                caption: "@Html.Raw(Localizer["Permissions"].Value)",
                sortOrder: "asc"
            }],
            onCellPrepared: menuOnCellPrepared
        }));

         return contents;
    }

    var currentMenuPermissions = null;
    var getCurrentMenuPermissions = {
        load: function () {
            if (currentMenu) {
                if (!currentMenuPermissions) {
                    $.ajax({
                        type: "GET",
                        async: false,
                        url: "@Url.Content("~/api/tools/MenuWebApi/GetRequiredPermissionsOfMenu")",
                        data: { menuId: currentMenu.id },
                        error: function (e) { DevExpress.ui.notify('@Localizer["Could not get required permissions of current menu"]', 'error', 600); },
                        success: function (data) {
                            currentMenuPermissions = data;
                        },
                    });
                }
            }
            else
                currentMenuPermissions = [];

            return currentMenuPermissions;
        }
    };

    function onAddPermission(e) {
        var permissionId = $("#cbPermission").dxDropDownBox("instance").option("value");
        if (!permissionId)
            DevExpress.ui.notify('@Localizer["Please selected one permission"]', 'error', 600);
        else {
            var permissionDisplayName = $("#cbPermission").dxDropDownBox("instance").option("text");
            if (!currentMenuPermissions)
                currentMenuPermissions = [];
            if (!currentMenuPermissions.find(function (p) { return p.permissionId == permissionId;})) {
                currentMenuPermissions.push({ permissionId: permissionId, permissionDisplayName: permissionDisplayName });
                $("#gridCurrentMenuPermission").dxDataGrid("instance").refresh();
            }
        }
    }

    function onRemovePermission(e) {
        var selecteds = $("#gridCurrentMenuPermission").dxDataGrid("instance").getSelectedRowsData();
        if (selecteds && selecteds.length > 0)
        {
            for (var i = 0; i < selecteds.length; ++i){
                var selected = selecteds[i];
                for (var j = 0; j < currentMenuPermissions.length; ++j) {
                    if (currentMenuPermissions[j].permissionId == selected.permissionId) {
                        currentMenuPermissions.splice(j, 1);
                        break;
                    }
                }
            }
            $("#gridCurrentMenuPermission").dxDataGrid("instance").refresh();
        }
    }

    function onSavePermission(e) {
        if (!currentMenu) {
            var diag = DevExpress.ui.dialog.custom({
                title: '@Localizer["Error"]',
                message: '@Localizer["No menu selected to save permissions"]'
            });
            diag.show();
        }
        else {
            var permissionIds = [];
            for (var i = 0; i < currentMenuPermissions.length; ++i) {
                permissionIds.push(currentMenuPermissions[i].permissionId);
            }

            $.ajax({
                type: 'POST',
                url: "@Url.Content("~/api/tools/MenuWebApi/SetRequiredPermissionsOfMenu")",
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                data: JSON.stringify({
                    menuId: currentMenu.id,
                    permissionIds: JSON.stringify(permissionIds)
                }),
                success: function (e) {
                    DevExpress.ui.notify('@Localizer["Set permissions success."]');
                    $("#popup").dxPopup("instance").hide();
                },
                error: function (e) {
                    var diag = DevExpress.ui.dialog.custom({
                        title: '@Localizer["Error"]',
                        message: e.responseText
                    });
                    diag.show();
                }
            });
        }
    }
</script>