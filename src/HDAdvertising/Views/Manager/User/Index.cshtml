@using HDAdvertising.Datas.Permission
@using HDAdvertising.Models.AdministratorViewModels

@model UserViewModel

@{
    ViewData["Title"] = "Quản lý tài khoản";

    var canEditUser = User.IsInRole(ApplicationPermissions.Manager_User_Edit.ToString());

    var canEditUserGroup_User = User.IsInRole(ApplicationPermissions.Manager_User_UserGroup.ToString());
}

<h2>Quản lý tài khoản</h2>
<div class="user_user">
    @(Html.DevExtreme().DataGrid()
        .ID("users")
        .ShowBorders(true)
        .Selection(s=>s.Mode(SelectionMode.Single))
        .RowAlternationEnabled(true)
        .HoverStateEnabled(true)
        .ColumnAutoWidth(true)
        .AllowColumnResizing(true)
        .AllowColumnReordering(true)
        .ColumnMinWidth(50)
        .DataSource(s=>s.WebApi().RouteName("areaRoute")
            .Controller("User").LoadAction("GetUserOfCurrentUser")
            .InsertAction("PostUser").UpdateAction("PutUser").DeleteAction("DeleteUser")
            .Key("Id"))
        .Columns(columns=>
        {
            columns.Add().DataField(Html.NameFor(m => m.Name)).Caption(Html.DisplayNameFor(m => m.Name)).HeaderCellTemplate(new JS("headerTemplate"))
                .ValidationRules(rules => rules.AddRequired()).SortOrder(SortOrder.Asc);

            columns.Add().DataField(Html.NameFor(m => m.Password)).Caption(Html.DisplayNameFor(m => m.Password)).HeaderCellTemplate(new JS("headerTemplate"))
                .Visible(false);

            columns.Add().DataField(Html.NameFor(m => m.FullName)).Caption(Html.DisplayNameFor(m => m.FullName)).HeaderCellTemplate(new JS("headerTemplate"));

            columns.Add().DataField(Html.NameFor(m => m.Email)).Caption(Html.DisplayNameFor(m => m.Email)).HeaderCellTemplate(new JS("headerTemplate"))
                .ValidationRules(rules => rules.AddEmail().Message("Vui lòng nhập đúng email"));

            columns.Add().DataField(Html.NameFor(m => m.PhoneNumber)).Caption(Html.DisplayNameFor(m => m.PhoneNumber)).HeaderCellTemplate(new JS("headerTemplate"));

            columns.Add().DataField(Html.NameFor(m => m.Active)).Caption(Html.DisplayNameFor(m => m.Active)).HeaderCellTemplate(new JS("headerTemplate"))
                .DataType(GridColumnDataType.Boolean);
        })
        .Sorting(s=>s.Mode(GridSortingMode.Multiple))
        .FilterRow(filterRow=>filterRow.Visible(true).ApplyFilter(GridApplyFilterMode.Auto))
        .SearchPanel(searchPanel=>searchPanel.Visible(true)
            .Width(240)
            .Placeholder("Tìm kiếm"))
        .HeaderFilter(f=>f.Visible(true))
        .Paging(paging => paging.PageSize(5))
        .Pager(pager =>
        {
            pager.ShowPageSizeSelector(true);
            pager.AllowedPageSizes(new List<int> { 5, 10, 20 });
            pager.ShowInfo(true);
            pager.InfoText("Trang {0}/{1} ({2} tài khoản)");
        })
        .OnContextMenuPreparing("userContextMenuPreparing")
        .Editing(e=>e.Mode(GridEditMode.Form)
            .AllowAdding(canEditUser)
            .AllowUpdating(canEditUser)
            .AllowDeleting(canEditUser)
            .Texts(texts =>
            {
                texts.AddRow("Thêm tài khoản");
                texts.EditRow("Sửa");
                texts.CancelRowChanges("Hủy");
                texts.DeleteRow("Xóa");
                texts.ConfirmDeleteTitle("Xóa tài khoản");
                texts.ConfirmDeleteMessage("Bạn chắc chắn xóa tài khoản?");
                texts.SaveAllChanges("Lưu các thay đổi");
                texts.SaveRowChanges("Lưu");
                texts.UndeleteRow("Hủy xóa");
                texts.ValidationCancelChanges("Hủy các thay đổi");
            })
            .Popup(popups=> { popups.MaxWidth(720);
                popups.Title("Thông tin tài khoản");
                popups.ShowTitle(true);
                popups.Height("auto");
                popups.ShowCloseButton(true);
                popups.ResizeEnabled(true);
            })
        )
        .OnContentReady("userContentReady")
        .OnCellPrepared("userCellPrepared")
        .OnToolbarPreparing("userToolbarPreparing")
)
</div>

@(Html.DevExtreme().Popup()
    .ID("user_usergroup")
    .Title("Phân nhóm tài khoản")
    .ShowTitle(true)
    .ShowCloseButton(true)
    .Height("auto")
    .Visible(false)
    .Width(720)
    .Height(600)
    .ToolbarItems(items=> {
        items.Add()
            .Widget(w => w.Button().Text("Lưu").OnClick("onSaveUserGroupOfUserClick"))
            .Location(ToolbarItemLocation.After)
            .Toolbar(Toolbar.Bottom);

        items.Add()
            .Widget(w => w.Button().Text("Hủy").OnClick("closePopupClick"))
            .Location(ToolbarItemLocation.After)
            .Toolbar(Toolbar.Bottom);
    }))

<script>
    function userContentReady(e) {
        var dataGrid = e.component;
        dataGrid.columnOption("command:edit", {
            visibleIndex: -1,
            width: 120
        });
    }

    function userCellPrepared(e) {
        if (e.rowType === "data" && e.column.command === "edit") {
            var isEditing = e.row.isEditing,
                $links = e.cellElement.find(".dx-link");

            $links.text("");

            if (isEditing) {
                $links.filter(".dx-link-save").addClass("dx-icon-save");
                $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
            } else {
                $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                $links.filter(".dx-link-delete").addClass("dx-icon-trash");
            }
        }
        else if (e.rowType === "header") {
            $links = e.cellElement.filter(".dx-datagrid-action");
            $links.css("text-align", "center");
        }
    }

    function headerTemplate(header, info) {
        $('<div>').html(info.column.caption).css('font-size', '16px').css('font-weight', "bold").appendTo(header);
    }

    function getUserDataGrid() {
        return $("#users").dxDataGrid("instance");
    }

    function userContextMenuPreparing(e) {
        var dataGrid = e.component;

        var allowEditUser = '@canEditUser'.toLowerCase() == "true" ? true : false;
        var allowEditUserGroup = '@canEditUserGroup_User'.toLowerCase() == "true" ? true : false;

        if (e.row.rowType == "data") {
            e.items = [
                {
                    text: "Nạp lại dữ liệu",
                    icon: "refresh",
                    onClick: function () {
                        dataGrid.refresh();
                    }
                }, {
                    beginGroup: true,
                    text: "Thêm tài khoản",
                    icon: "add",
                    disabled: !allowEditUser,
                    onItemClick: function () {
                        dataGrid.insertRow();
                    }
                }, {
                    text: "Sửa tài khoản",
                    icon: "edit",
                    disabled: !allowEditUser,
                    onItemClick: function () {
                        dataGrid.editRow(e.row.rowIndex);
                    }
                }, {
                    text: "Xóa tài khoản",
                    icon: "remove",
                    disabled: !allowEditUser,
                    onItemClick: function () {
                        dataGrid.removeRow(e.row.rowIndex);
                    }
                }, {
                    beginGroup: true,
                    text: "Phân nhóm tài khoản",
                    icon: "group",
                    disabled: !allowEditUserGroup,
                    onItemClick: function () {
                        userSetUserGroup(e.row.rowIndex);
                    }
                }];
        }
    }

    function onUserDataError(e) {
        DevExpress.ui.notify(e.error.message);
    }

    function userToolbarPreparing(e) {
        var dataGrid = e.component;
        var allowEditUserGroup = '@canEditUserGroup_User'.toLowerCase() == "true" ? true : false;
        e.toolbarOptions.items.unshift(
            {
                location: "before",
                widget: "dxButton",
                options: {
                    icon: "refresh",
                    hint: "Nạp lại dữ liệu",
                    onClick: function () {
                        dataGrid.refresh();
                    }
                }
            }, {
                location: "before",
                widget: "dxButton",
                options: {
                    icon: "group",
                    text: "Phân nhóm",
                    disabled: !allowEditUserGroup,
                    hint: "Phân tài khoản vào nhóm tài khoản",
                    onClick: function () { userGroupClick();}
                }
            });
    }

    function userGroupClick() {
        var dataGrid = getUserDataGrid();
        if (dataGrid.getSelectedRowsData().length > 0)
            userSetUserGroup(dataGrid.getRowIndexByKey(dataGrid.getSelectedRowsData()[0].Id));
    }

    function userSetUserGroup(rowIndex) {
        var userId = getUserDataGrid().getKeyByRowIndex(rowIndex);

        $("#user_usergroup").dxPopup('instance').option("title", "Phân nhóm cho tài khoản \"" + getUserDataGrid().cellValue(rowIndex, "UserName") + "\"");

        currentUserId = userId;
        isStartUserGroup = true;
        currentUserGroupIdsOfUser = null;

        $.ajax({
            cache: false,
            type: "GET",
            url: '/Manager/User/SetGroup',
            data: { userId: userId},
            success: function (data) {
                var ins = $("#user_usergroup").dxPopup('instance');
                ins.option('contentTemplate', function (contentElement) {
                    contentElement.append(data);
                });
                ins.show();
            },
            error: function () {
                DevExpress.ui.notify("Không lấy được cấu hình phân nhóm tài khoản");
            }
        });
    }

    function closePopupClick(data) {
        $("#user_usergroup").dxPopup('instance').hide();
    }

    var currentUserId = null;
    var isStartUserGroup = true;
    var currentUserGroupIdsOfUser = null;

    function getUserGroupBase() {
        return $("#treeUserGroup").dxTreeList("instance");
    }

    function getUserGroupOfUserDataGrid() {
        return $("#userUserGroup").dxDataGrid("instance");
    }

    var getUserGroupOfUser = {
        load: function () {
            return $.ajax({
                type: 'GET',
                url: '/Manager/User/GetCurrentGroupOfUser',
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                data: { userId: currentUserId, groupIds: currentUserGroupIdsOfUser },
                error: function (e) { DevExpress.ui.notify("Không lấy được các nhóm hiện tại của tài khoản"); },
                success: function (e) {
                    isStartUserGroup = false;
                    var ids = [];
                    for (var i = 0; i < e.length; ++i)
                        ids.push(e[i].Id);
                    currentUserGroupIdsOfUser = JSON.stringify(ids);
                    getUserGroupBase().refresh();
                }
            });
        }
    };

    var getUserGroupCanSet = {
        load: function () {
            if (isStartUserGroup)
                return null;

            return $.ajax({
                type: 'GET',
                url: '/Manager/User/GetGroupCanSetForUser',
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                data: { groupIds: currentUserGroupIdsOfUser },
                error: function (e) { DevExpress.ui.notify("Không lấy được các nhóm có thể phân cho tài khoản"); }
            });
        }
    };

    function addUserGroupForUserClick(e){
        var treeUserGroupBase = getUserGroupBase();
        var userGroupsSet = treeUserGroupBase.getSelectedRowsData();
        if (userGroupsSet.length > 0)
        {
            isStartUserGroup = false;

            var userGroupOfUserGrid = getUserGroupOfUserDataGrid();

            var ids = [];
            for (var i = 0; i < userGroupsSet.length; ++i)
                ids.push(userGroupsSet[i].Id);
            for (var i = 0; i < userGroupOfUserGrid.totalCount(); ++i)
                ids.push(userGroupOfUserGrid.getKeyByRowIndex(i).Id);
            currentUserGroupIdsOfUser = JSON.stringify(ids);
            userGroupOfUserGrid.refresh();
        }
    }

    function removeUserGroupForUserClick(e) {
        var userGroupOfUserGrid = getUserGroupOfUserDataGrid();
        var userGroupRemoves = userGroupOfUserGrid.getSelectedRowsData();
        if (userGroupRemoves.length > 0)
        {
            isStartUserGroup = false;

            var idremoves = [];
            for (var i = 0; i < userGroupRemoves.length; ++i)
                idremoves.push(userGroupRemoves[i].Id);

            var ids = [];
            for (var i = 0; i < userGroupOfUserGrid.totalCount(); ++i) {
                var id = userGroupOfUserGrid.getKeyByRowIndex(i).Id;
                if (idremoves.indexOf(id) < 0)
                    ids.push(id);
            }
            currentUserGroupIdsOfUser = JSON.stringify(ids);
            userGroupOfUserGrid.refresh();
        }
    }

    function onSaveUserGroupOfUserClick() {
        var ids = [];
        var userGroupOfUserGrid = getUserGroupOfUserDataGrid();
        for (var i = 0; i < userGroupOfUserGrid.totalCount(); ++i)
            ids.push(userGroupOfUserGrid.getKeyByRowIndex(i).Id);

        $.ajax({
            type: 'POST',
            url: '/Manager/User/SetGroup',
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            data: JSON.stringify({
                UserId: currentUserId,
                GroupIds: JSON.stringify(ids)
            }),
            success: function (e) {
                DevExpress.ui.notify("Phân nhóm cho tài khoản thành công");
                closePopupClick(null);
            },
            error: function (e) {
                DevExpress.ui.notify("Không phân nhóm được: " + e);
            }
        })
    }
</script>